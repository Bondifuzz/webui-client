/**
 * FastAPI
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import CreateImageRequestModel from '../model/CreateImageRequestModel';
import ErrorModel from '../model/ErrorModel';
import HTTPValidationError from '../model/HTTPValidationError';
import ImageResponseModel from '../model/ImageResponseModel';
import ItemCountResponseModel from '../model/ItemCountResponseModel';
import ListImagesResponseModel from '../model/ListImagesResponseModel';
import ORMEngineID from '../model/ORMEngineID';
import ORMImageStatus from '../model/ORMImageStatus';
import UpdateImageRequestModel from '../model/UpdateImageRequestModel';

/**
* ImagesAdmin service.
* @module api/ImagesAdminApi
* @version 0.1.0
*/
export default class ImagesAdminApi {

    /**
    * Constructs a new ImagesAdminApi. 
    * @alias module:api/ImagesAdminApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }



    /**
     * Create Builtin Image
     * @param {module:model/CreateImageRequestModel} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ImageResponseModel} and HTTP response
     */
    createBuiltinImageWithHttpInfo(body) {
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling createBuiltinImage");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ImageResponseModel;
      return this.apiClient.callApi(
        '/api/v1/admin/images', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Create Builtin Image
     * @param {module:model/CreateImageRequestModel} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ImageResponseModel}
     */
    createBuiltinImage(body) {
      return this.createBuiltinImageWithHttpInfo(body)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Delete Builtin Image
     * @param {String} imageId 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Object} and HTTP response
     */
    deleteBuiltinImageWithHttpInfo(imageId) {
      let postBody = null;
      // verify the required parameter 'imageId' is set
      if (imageId === undefined || imageId === null) {
        throw new Error("Missing the required parameter 'imageId' when calling deleteBuiltinImage");
      }

      let pathParams = {
        'image_id': imageId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/api/v1/admin/images/{image_id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Delete Builtin Image
     * @param {String} imageId 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Object}
     */
    deleteBuiltinImage(imageId) {
      return this.deleteBuiltinImageWithHttpInfo(imageId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get Builtin Image
     * @param {String} imageId 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ImageResponseModel} and HTTP response
     */
    getBuiltinImageWithHttpInfo(imageId) {
      let postBody = null;
      // verify the required parameter 'imageId' is set
      if (imageId === undefined || imageId === null) {
        throw new Error("Missing the required parameter 'imageId' when calling getBuiltinImage");
      }

      let pathParams = {
        'image_id': imageId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ImageResponseModel;
      return this.apiClient.callApi(
        '/api/v1/admin/images/{image_id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Get Builtin Image
     * @param {String} imageId 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ImageResponseModel}
     */
    getBuiltinImage(imageId) {
      return this.getBuiltinImageWithHttpInfo(imageId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get Builtin Image Count
     * @param {Object} opts Optional parameters
     * @param {Number} opts.pgSize  (default to 100)
     * @param {Array.<module:model/ORMEngineID>} opts.engines 
     * @param {Array.<module:model/ORMImageStatus>} opts.statuses 
     * @param {module:model/String} opts.imageType An enumeration.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ItemCountResponseModel} and HTTP response
     */
    getBuiltinImageCountWithHttpInfo(opts) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'pg_size': opts['pgSize'],
        'engines': this.apiClient.buildCollectionParam(opts['engines'], 'multi'),
        'statuses': this.apiClient.buildCollectionParam(opts['statuses'], 'multi'),
        'image_type': opts['imageType']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ItemCountResponseModel;
      return this.apiClient.callApi(
        '/api/v1/admin/images/count', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Get Builtin Image Count
     * @param {Object} opts Optional parameters
     * @param {Number} opts.pgSize  (default to 100)
     * @param {Array.<module:model/ORMEngineID>} opts.engines 
     * @param {Array.<module:model/ORMImageStatus>} opts.statuses 
     * @param {module:model/String} opts.imageType An enumeration.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ItemCountResponseModel}
     */
    getBuiltinImageCount(opts) {
      return this.getBuiltinImageCountWithHttpInfo(opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * List Builtin Images
     * @param {Object} opts Optional parameters
     * @param {Number} opts.pgSize  (default to 100)
     * @param {Number} opts.pgNum  (default to 0)
     * @param {Array.<module:model/ORMEngineID>} opts.engines 
     * @param {Array.<module:model/ORMImageStatus>} opts.statuses 
     * @param {module:model/String} opts.imageType An enumeration.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ListImagesResponseModel} and HTTP response
     */
    listBuiltinImagesWithHttpInfo(opts) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'pg_size': opts['pgSize'],
        'pg_num': opts['pgNum'],
        'engines': this.apiClient.buildCollectionParam(opts['engines'], 'multi'),
        'statuses': this.apiClient.buildCollectionParam(opts['statuses'], 'multi'),
        'image_type': opts['imageType']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ListImagesResponseModel;
      return this.apiClient.callApi(
        '/api/v1/admin/images', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * List Builtin Images
     * @param {Object} opts Optional parameters
     * @param {Number} opts.pgSize  (default to 100)
     * @param {Number} opts.pgNum  (default to 0)
     * @param {Array.<module:model/ORMEngineID>} opts.engines 
     * @param {Array.<module:model/ORMImageStatus>} opts.statuses 
     * @param {module:model/String} opts.imageType An enumeration.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ListImagesResponseModel}
     */
    listBuiltinImages(opts) {
      return this.listBuiltinImagesWithHttpInfo(opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Update Builtin Image
     * @param {String} imageId 
     * @param {module:model/UpdateImageRequestModel} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Object} and HTTP response
     */
    updateBuiltinImageWithHttpInfo(imageId, body) {
      let postBody = body;
      // verify the required parameter 'imageId' is set
      if (imageId === undefined || imageId === null) {
        throw new Error("Missing the required parameter 'imageId' when calling updateBuiltinImage");
      }
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling updateBuiltinImage");
      }

      let pathParams = {
        'image_id': imageId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/api/v1/admin/images/{image_id}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Update Builtin Image
     * @param {String} imageId 
     * @param {module:model/UpdateImageRequestModel} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Object}
     */
    updateBuiltinImage(imageId, body) {
      return this.updateBuiltinImageWithHttpInfo(imageId, body)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


}
