/**
 * FastAPI
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import CopyCorpusRequestModel from '../model/CopyCorpusRequestModel';
import CrashResponseModel from '../model/CrashResponseModel';
import CreateFuzzerRequestModel from '../model/CreateFuzzerRequestModel';
import CreateIntegrationRequestModel from '../model/CreateIntegrationRequestModel';
import CreateProjectRequestModel from '../model/CreateProjectRequestModel';
import CreateRevisionRequestModel from '../model/CreateRevisionRequestModel';
import ErrorModel from '../model/ErrorModel';
import FuzzerResponseModel from '../model/FuzzerResponseModel';
import HTTPValidationError from '../model/HTTPValidationError';
import ImageResponseModel from '../model/ImageResponseModel';
import IntegrationResponseModel from '../model/IntegrationResponseModel';
import ItemCountResponseModel from '../model/ItemCountResponseModel';
import ListCrashesResponseModel from '../model/ListCrashesResponseModel';
import ListFuzzersResponseModel from '../model/ListFuzzersResponseModel';
import ListImagesResponseModel from '../model/ListImagesResponseModel';
import ListIntegrationsResponseModel from '../model/ListIntegrationsResponseModel';
import ListPoolsResponseModel from '../model/ListPoolsResponseModel';
import ListProjectsResponseModel from '../model/ListProjectsResponseModel';
import ListRevisionsResponseModel from '../model/ListRevisionsResponseModel';
import ListStatisticsResponseModel from '../model/ListStatisticsResponseModel';
import ORMEngineID from '../model/ORMEngineID';
import ORMHealth from '../model/ORMHealth';
import ORMIntegrationStatus from '../model/ORMIntegrationStatus';
import ORMIntegrationTypeID from '../model/ORMIntegrationTypeID';
import ORMLangID from '../model/ORMLangID';
import ORMRevisionStatus from '../model/ORMRevisionStatus';
import PoolResponseModel from '../model/PoolResponseModel';
import ProjectResponseModel from '../model/ProjectResponseModel';
import ProjectTrashbinEmptyResponseModel from '../model/ProjectTrashbinEmptyResponseModel';
import PutArchivedCrashRequestModel from '../model/PutArchivedCrashRequestModel';
import RevisionResponseModel from '../model/RevisionResponseModel';
import SetActiveRevisionRequestModel from '../model/SetActiveRevisionRequestModel';
import UpdateFuzzerRequestModel from '../model/UpdateFuzzerRequestModel';
import UpdateIntegrationConfigRequestModel from '../model/UpdateIntegrationConfigRequestModel';
import UpdateIntegrationRequestModel from '../model/UpdateIntegrationRequestModel';
import UpdatePoolInfoRequestModel from '../model/UpdatePoolInfoRequestModel';
import UpdateProjectRequestModel from '../model/UpdateProjectRequestModel';
import UpdateRevisionInfoRequestModel from '../model/UpdateRevisionInfoRequestModel';
import UpdateRevisionResourcesRequestModel from '../model/UpdateRevisionResourcesRequestModel';
import UpdateUserRequestModel from '../model/UpdateUserRequestModel';
import UserResponseModel from '../model/UserResponseModel';
import UserTrashbinEmptyResponseModel from '../model/UserTrashbinEmptyResponseModel';

/**
* Users service.
* @module api/UsersApi
* @version 0.1.0
*/
export default class UsersApi {

    /**
    * Constructs a new UsersApi. 
    * @alias module:api/UsersApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }



    /**
     * Change Crash Archived
     * @param {String} fuzzerId 
     * @param {String} crashId 
     * @param {String} userId 
     * @param {String} projectId 
     * @param {module:model/PutArchivedCrashRequestModel} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Object} and HTTP response
     */
    changeCrashArchivedWithHttpInfo(fuzzerId, crashId, userId, projectId, body) {
      let postBody = body;
      // verify the required parameter 'fuzzerId' is set
      if (fuzzerId === undefined || fuzzerId === null) {
        throw new Error("Missing the required parameter 'fuzzerId' when calling changeCrashArchived");
      }
      // verify the required parameter 'crashId' is set
      if (crashId === undefined || crashId === null) {
        throw new Error("Missing the required parameter 'crashId' when calling changeCrashArchived");
      }
      // verify the required parameter 'userId' is set
      if (userId === undefined || userId === null) {
        throw new Error("Missing the required parameter 'userId' when calling changeCrashArchived");
      }
      // verify the required parameter 'projectId' is set
      if (projectId === undefined || projectId === null) {
        throw new Error("Missing the required parameter 'projectId' when calling changeCrashArchived");
      }
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling changeCrashArchived");
      }

      let pathParams = {
        'fuzzer_id': fuzzerId,
        'crash_id': crashId,
        'user_id': userId,
        'project_id': projectId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/api/v1/users/{user_id}/projects/{project_id}/fuzzers/{fuzzer_id}/crashes/{crash_id}/archived', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Change Crash Archived
     * @param {String} fuzzerId 
     * @param {String} crashId 
     * @param {String} userId 
     * @param {String} projectId 
     * @param {module:model/PutArchivedCrashRequestModel} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Object}
     */
    changeCrashArchived(fuzzerId, crashId, userId, projectId, body) {
      return this.changeCrashArchivedWithHttpInfo(fuzzerId, crashId, userId, projectId, body)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Copy Corpus Files
     * @param {String} dstRevId 
     * @param {String} userId 
     * @param {String} projectId 
     * @param {String} fuzzerId 
     * @param {module:model/CopyCorpusRequestModel} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Object} and HTTP response
     */
    copyCorpusFilesWithHttpInfo(dstRevId, userId, projectId, fuzzerId, body) {
      let postBody = body;
      // verify the required parameter 'dstRevId' is set
      if (dstRevId === undefined || dstRevId === null) {
        throw new Error("Missing the required parameter 'dstRevId' when calling copyCorpusFiles");
      }
      // verify the required parameter 'userId' is set
      if (userId === undefined || userId === null) {
        throw new Error("Missing the required parameter 'userId' when calling copyCorpusFiles");
      }
      // verify the required parameter 'projectId' is set
      if (projectId === undefined || projectId === null) {
        throw new Error("Missing the required parameter 'projectId' when calling copyCorpusFiles");
      }
      // verify the required parameter 'fuzzerId' is set
      if (fuzzerId === undefined || fuzzerId === null) {
        throw new Error("Missing the required parameter 'fuzzerId' when calling copyCorpusFiles");
      }
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling copyCorpusFiles");
      }

      let pathParams = {
        'dst_rev_id': dstRevId,
        'user_id': userId,
        'project_id': projectId,
        'fuzzer_id': fuzzerId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/api/v1/users/{user_id}/projects/{project_id}/fuzzers/{fuzzer_id}/revisions/{dst_rev_id}/files/corpus', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Copy Corpus Files
     * @param {String} dstRevId 
     * @param {String} userId 
     * @param {String} projectId 
     * @param {String} fuzzerId 
     * @param {module:model/CopyCorpusRequestModel} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Object}
     */
    copyCorpusFiles(dstRevId, userId, projectId, fuzzerId, body) {
      return this.copyCorpusFilesWithHttpInfo(dstRevId, userId, projectId, fuzzerId, body)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Count Fuzzer Crashes
     * @param {String} fuzzerId 
     * @param {String} userId 
     * @param {String} projectId 
     * @param {Object} opts Optional parameters
     * @param {Number} opts.pgSize  (default to 100)
     * @param {String} opts.dateBegin 
     * @param {String} opts.dateEnd 
     * @param {Boolean} opts.archived 
     * @param {Boolean} opts.reproduced 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ItemCountResponseModel} and HTTP response
     */
    countFuzzerCrashesWithHttpInfo(fuzzerId, userId, projectId, opts) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'fuzzerId' is set
      if (fuzzerId === undefined || fuzzerId === null) {
        throw new Error("Missing the required parameter 'fuzzerId' when calling countFuzzerCrashes");
      }
      // verify the required parameter 'userId' is set
      if (userId === undefined || userId === null) {
        throw new Error("Missing the required parameter 'userId' when calling countFuzzerCrashes");
      }
      // verify the required parameter 'projectId' is set
      if (projectId === undefined || projectId === null) {
        throw new Error("Missing the required parameter 'projectId' when calling countFuzzerCrashes");
      }

      let pathParams = {
        'fuzzer_id': fuzzerId,
        'user_id': userId,
        'project_id': projectId
      };
      let queryParams = {
        'pg_size': opts['pgSize'],
        'date_begin': opts['dateBegin'],
        'date_end': opts['dateEnd'],
        'archived': opts['archived'],
        'reproduced': opts['reproduced']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ItemCountResponseModel;
      return this.apiClient.callApi(
        '/api/v1/users/{user_id}/projects/{project_id}/fuzzers/{fuzzer_id}/crashes/count', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Count Fuzzer Crashes
     * @param {String} fuzzerId 
     * @param {String} userId 
     * @param {String} projectId 
     * @param {Object} opts Optional parameters
     * @param {Number} opts.pgSize  (default to 100)
     * @param {String} opts.dateBegin 
     * @param {String} opts.dateEnd 
     * @param {Boolean} opts.archived 
     * @param {Boolean} opts.reproduced 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ItemCountResponseModel}
     */
    countFuzzerCrashes(fuzzerId, userId, projectId, opts) {
      return this.countFuzzerCrashesWithHttpInfo(fuzzerId, userId, projectId, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Count Fuzzer Statistics Records
     * @param {String} userId 
     * @param {String} projectId 
     * @param {String} fuzzerId 
     * @param {module:model/String} groupBy An enumeration.
     * @param {Object} opts Optional parameters
     * @param {Number} opts.pgSize  (default to 100)
     * @param {String} opts.dateBegin 
     * @param {String} opts.dateEnd 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ItemCountResponseModel} and HTTP response
     */
    countFuzzerStatisticsRecordsWithHttpInfo(userId, projectId, fuzzerId, groupBy, opts) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'userId' is set
      if (userId === undefined || userId === null) {
        throw new Error("Missing the required parameter 'userId' when calling countFuzzerStatisticsRecords");
      }
      // verify the required parameter 'projectId' is set
      if (projectId === undefined || projectId === null) {
        throw new Error("Missing the required parameter 'projectId' when calling countFuzzerStatisticsRecords");
      }
      // verify the required parameter 'fuzzerId' is set
      if (fuzzerId === undefined || fuzzerId === null) {
        throw new Error("Missing the required parameter 'fuzzerId' when calling countFuzzerStatisticsRecords");
      }
      // verify the required parameter 'groupBy' is set
      if (groupBy === undefined || groupBy === null) {
        throw new Error("Missing the required parameter 'groupBy' when calling countFuzzerStatisticsRecords");
      }

      let pathParams = {
        'user_id': userId,
        'project_id': projectId,
        'fuzzer_id': fuzzerId
      };
      let queryParams = {
        'pg_size': opts['pgSize'],
        'group_by': groupBy,
        'date_begin': opts['dateBegin'],
        'date_end': opts['dateEnd']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ItemCountResponseModel;
      return this.apiClient.callApi(
        '/api/v1/users/{user_id}/projects/{project_id}/fuzzers/{fuzzer_id}/statistics/count', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Count Fuzzer Statistics Records
     * @param {String} userId 
     * @param {String} projectId 
     * @param {String} fuzzerId 
     * @param {module:model/String} groupBy An enumeration.
     * @param {Object} opts Optional parameters
     * @param {Number} opts.pgSize  (default to 100)
     * @param {String} opts.dateBegin 
     * @param {String} opts.dateEnd 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ItemCountResponseModel}
     */
    countFuzzerStatisticsRecords(userId, projectId, fuzzerId, groupBy, opts) {
      return this.countFuzzerStatisticsRecordsWithHttpInfo(userId, projectId, fuzzerId, groupBy, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Count Project Images
     * Returns count of docker images corresponding to provided programming fuzzer engine in project
     * @param {String} projectId 
     * @param {String} userId 
     * @param {Object} opts Optional parameters
     * @param {Number} opts.pgSize  (default to 100)
     * @param {Array.<module:model/ORMEngineID>} opts.engines 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ItemCountResponseModel} and HTTP response
     */
    countProjectImagesWithHttpInfo(projectId, userId, opts) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'projectId' is set
      if (projectId === undefined || projectId === null) {
        throw new Error("Missing the required parameter 'projectId' when calling countProjectImages");
      }
      // verify the required parameter 'userId' is set
      if (userId === undefined || userId === null) {
        throw new Error("Missing the required parameter 'userId' when calling countProjectImages");
      }

      let pathParams = {
        'project_id': projectId,
        'user_id': userId
      };
      let queryParams = {
        'pg_size': opts['pgSize'],
        'engines': this.apiClient.buildCollectionParam(opts['engines'], 'multi')
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ItemCountResponseModel;
      return this.apiClient.callApi(
        '/api/v1/users/{user_id}/projects/{project_id}/images/count', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Count Project Images
     * Returns count of docker images corresponding to provided programming fuzzer engine in project
     * @param {String} projectId 
     * @param {String} userId 
     * @param {Object} opts Optional parameters
     * @param {Number} opts.pgSize  (default to 100)
     * @param {Array.<module:model/ORMEngineID>} opts.engines 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ItemCountResponseModel}
     */
    countProjectImages(projectId, userId, opts) {
      return this.countProjectImagesWithHttpInfo(projectId, userId, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Count Revision Crashes
     * @param {String} revisionId 
     * @param {String} userId 
     * @param {String} projectId 
     * @param {String} fuzzerId 
     * @param {Object} opts Optional parameters
     * @param {Number} opts.pgSize  (default to 100)
     * @param {String} opts.dateBegin 
     * @param {String} opts.dateEnd 
     * @param {Boolean} opts.archived 
     * @param {Boolean} opts.reproduced 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ItemCountResponseModel} and HTTP response
     */
    countRevisionCrashesWithHttpInfo(revisionId, userId, projectId, fuzzerId, opts) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'revisionId' is set
      if (revisionId === undefined || revisionId === null) {
        throw new Error("Missing the required parameter 'revisionId' when calling countRevisionCrashes");
      }
      // verify the required parameter 'userId' is set
      if (userId === undefined || userId === null) {
        throw new Error("Missing the required parameter 'userId' when calling countRevisionCrashes");
      }
      // verify the required parameter 'projectId' is set
      if (projectId === undefined || projectId === null) {
        throw new Error("Missing the required parameter 'projectId' when calling countRevisionCrashes");
      }
      // verify the required parameter 'fuzzerId' is set
      if (fuzzerId === undefined || fuzzerId === null) {
        throw new Error("Missing the required parameter 'fuzzerId' when calling countRevisionCrashes");
      }

      let pathParams = {
        'revision_id': revisionId,
        'user_id': userId,
        'project_id': projectId,
        'fuzzer_id': fuzzerId
      };
      let queryParams = {
        'pg_size': opts['pgSize'],
        'date_begin': opts['dateBegin'],
        'date_end': opts['dateEnd'],
        'archived': opts['archived'],
        'reproduced': opts['reproduced']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ItemCountResponseModel;
      return this.apiClient.callApi(
        '/api/v1/users/{user_id}/projects/{project_id}/fuzzers/{fuzzer_id}/revisions/{revision_id}/crashes/count', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Count Revision Crashes
     * @param {String} revisionId 
     * @param {String} userId 
     * @param {String} projectId 
     * @param {String} fuzzerId 
     * @param {Object} opts Optional parameters
     * @param {Number} opts.pgSize  (default to 100)
     * @param {String} opts.dateBegin 
     * @param {String} opts.dateEnd 
     * @param {Boolean} opts.archived 
     * @param {Boolean} opts.reproduced 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ItemCountResponseModel}
     */
    countRevisionCrashes(revisionId, userId, projectId, fuzzerId, opts) {
      return this.countRevisionCrashesWithHttpInfo(revisionId, userId, projectId, fuzzerId, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Count Revision Statistics Records
     * @param {String} userId 
     * @param {String} projectId 
     * @param {String} fuzzerId 
     * @param {String} revisionId 
     * @param {module:model/String} groupBy An enumeration.
     * @param {Object} opts Optional parameters
     * @param {Number} opts.pgSize  (default to 100)
     * @param {String} opts.dateBegin 
     * @param {String} opts.dateEnd 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ItemCountResponseModel} and HTTP response
     */
    countRevisionStatisticsRecordsWithHttpInfo(userId, projectId, fuzzerId, revisionId, groupBy, opts) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'userId' is set
      if (userId === undefined || userId === null) {
        throw new Error("Missing the required parameter 'userId' when calling countRevisionStatisticsRecords");
      }
      // verify the required parameter 'projectId' is set
      if (projectId === undefined || projectId === null) {
        throw new Error("Missing the required parameter 'projectId' when calling countRevisionStatisticsRecords");
      }
      // verify the required parameter 'fuzzerId' is set
      if (fuzzerId === undefined || fuzzerId === null) {
        throw new Error("Missing the required parameter 'fuzzerId' when calling countRevisionStatisticsRecords");
      }
      // verify the required parameter 'revisionId' is set
      if (revisionId === undefined || revisionId === null) {
        throw new Error("Missing the required parameter 'revisionId' when calling countRevisionStatisticsRecords");
      }
      // verify the required parameter 'groupBy' is set
      if (groupBy === undefined || groupBy === null) {
        throw new Error("Missing the required parameter 'groupBy' when calling countRevisionStatisticsRecords");
      }

      let pathParams = {
        'user_id': userId,
        'project_id': projectId,
        'fuzzer_id': fuzzerId,
        'revision_id': revisionId
      };
      let queryParams = {
        'pg_size': opts['pgSize'],
        'group_by': groupBy,
        'date_begin': opts['dateBegin'],
        'date_end': opts['dateEnd']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ItemCountResponseModel;
      return this.apiClient.callApi(
        '/api/v1/users/{user_id}/projects/{project_id}/fuzzers/{fuzzer_id}/revisions/{revision_id}/statistics/count', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Count Revision Statistics Records
     * @param {String} userId 
     * @param {String} projectId 
     * @param {String} fuzzerId 
     * @param {String} revisionId 
     * @param {module:model/String} groupBy An enumeration.
     * @param {Object} opts Optional parameters
     * @param {Number} opts.pgSize  (default to 100)
     * @param {String} opts.dateBegin 
     * @param {String} opts.dateEnd 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ItemCountResponseModel}
     */
    countRevisionStatisticsRecords(userId, projectId, fuzzerId, revisionId, groupBy, opts) {
      return this.countRevisionStatisticsRecordsWithHttpInfo(userId, projectId, fuzzerId, revisionId, groupBy, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Create Bug Tracker Integration
     * @param {String} projectId 
     * @param {String} userId 
     * @param {module:model/CreateIntegrationRequestModel} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/IntegrationResponseModel} and HTTP response
     */
    createBugTrackerIntegrationWithHttpInfo(projectId, userId, body) {
      let postBody = body;
      // verify the required parameter 'projectId' is set
      if (projectId === undefined || projectId === null) {
        throw new Error("Missing the required parameter 'projectId' when calling createBugTrackerIntegration");
      }
      // verify the required parameter 'userId' is set
      if (userId === undefined || userId === null) {
        throw new Error("Missing the required parameter 'userId' when calling createBugTrackerIntegration");
      }
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling createBugTrackerIntegration");
      }

      let pathParams = {
        'project_id': projectId,
        'user_id': userId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = IntegrationResponseModel;
      return this.apiClient.callApi(
        '/api/v1/users/{user_id}/projects/{project_id}/integrations', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Create Bug Tracker Integration
     * @param {String} projectId 
     * @param {String} userId 
     * @param {module:model/CreateIntegrationRequestModel} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/IntegrationResponseModel}
     */
    createBugTrackerIntegration(projectId, userId, body) {
      return this.createBugTrackerIntegrationWithHttpInfo(projectId, userId, body)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Create Fuzzer
     * @param {String} projectId 
     * @param {String} userId 
     * @param {module:model/CreateFuzzerRequestModel} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/FuzzerResponseModel} and HTTP response
     */
    createFuzzerWithHttpInfo(projectId, userId, body) {
      let postBody = body;
      // verify the required parameter 'projectId' is set
      if (projectId === undefined || projectId === null) {
        throw new Error("Missing the required parameter 'projectId' when calling createFuzzer");
      }
      // verify the required parameter 'userId' is set
      if (userId === undefined || userId === null) {
        throw new Error("Missing the required parameter 'userId' when calling createFuzzer");
      }
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling createFuzzer");
      }

      let pathParams = {
        'project_id': projectId,
        'user_id': userId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = FuzzerResponseModel;
      return this.apiClient.callApi(
        '/api/v1/users/{user_id}/projects/{project_id}/fuzzers', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Create Fuzzer
     * @param {String} projectId 
     * @param {String} userId 
     * @param {module:model/CreateFuzzerRequestModel} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/FuzzerResponseModel}
     */
    createFuzzer(projectId, userId, body) {
      return this.createFuzzerWithHttpInfo(projectId, userId, body)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Create Project
     * @param {String} userId 
     * @param {module:model/CreateProjectRequestModel} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ProjectResponseModel} and HTTP response
     */
    createProjectWithHttpInfo(userId, body) {
      let postBody = body;
      // verify the required parameter 'userId' is set
      if (userId === undefined || userId === null) {
        throw new Error("Missing the required parameter 'userId' when calling createProject");
      }
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling createProject");
      }

      let pathParams = {
        'user_id': userId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ProjectResponseModel;
      return this.apiClient.callApi(
        '/api/v1/users/{user_id}/projects', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Create Project
     * @param {String} userId 
     * @param {module:model/CreateProjectRequestModel} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ProjectResponseModel}
     */
    createProject(userId, body) {
      return this.createProjectWithHttpInfo(userId, body)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Create Revision
     * @param {String} userId 
     * @param {String} projectId 
     * @param {String} fuzzerId 
     * @param {module:model/CreateRevisionRequestModel} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/RevisionResponseModel} and HTTP response
     */
    createRevisionWithHttpInfo(userId, projectId, fuzzerId, body) {
      let postBody = body;
      // verify the required parameter 'userId' is set
      if (userId === undefined || userId === null) {
        throw new Error("Missing the required parameter 'userId' when calling createRevision");
      }
      // verify the required parameter 'projectId' is set
      if (projectId === undefined || projectId === null) {
        throw new Error("Missing the required parameter 'projectId' when calling createRevision");
      }
      // verify the required parameter 'fuzzerId' is set
      if (fuzzerId === undefined || fuzzerId === null) {
        throw new Error("Missing the required parameter 'fuzzerId' when calling createRevision");
      }
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling createRevision");
      }

      let pathParams = {
        'user_id': userId,
        'project_id': projectId,
        'fuzzer_id': fuzzerId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = RevisionResponseModel;
      return this.apiClient.callApi(
        '/api/v1/users/{user_id}/projects/{project_id}/fuzzers/{fuzzer_id}/revisions', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Create Revision
     * @param {String} userId 
     * @param {String} projectId 
     * @param {String} fuzzerId 
     * @param {module:model/CreateRevisionRequestModel} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/RevisionResponseModel}
     */
    createRevision(userId, projectId, fuzzerId, body) {
      return this.createRevisionWithHttpInfo(userId, projectId, fuzzerId, body)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Delete Fuzzer
     * @param {String} fuzzerId 
     * @param {String} userId 
     * @param {String} projectId 
     * @param {module:model/String} action An enumeration.
     * @param {Object} opts Optional parameters
     * @param {String} opts.newName 
     * @param {Boolean} opts.noBackup  (default to false)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Object} and HTTP response
     */
    deleteFuzzerWithHttpInfo(fuzzerId, userId, projectId, action, opts) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'fuzzerId' is set
      if (fuzzerId === undefined || fuzzerId === null) {
        throw new Error("Missing the required parameter 'fuzzerId' when calling deleteFuzzer");
      }
      // verify the required parameter 'userId' is set
      if (userId === undefined || userId === null) {
        throw new Error("Missing the required parameter 'userId' when calling deleteFuzzer");
      }
      // verify the required parameter 'projectId' is set
      if (projectId === undefined || projectId === null) {
        throw new Error("Missing the required parameter 'projectId' when calling deleteFuzzer");
      }
      // verify the required parameter 'action' is set
      if (action === undefined || action === null) {
        throw new Error("Missing the required parameter 'action' when calling deleteFuzzer");
      }

      let pathParams = {
        'fuzzer_id': fuzzerId,
        'user_id': userId,
        'project_id': projectId
      };
      let queryParams = {
        'new_name': opts['newName'],
        'action': action,
        'no_backup': opts['noBackup']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/api/v1/users/{user_id}/projects/{project_id}/fuzzers/{fuzzer_id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Delete Fuzzer
     * @param {String} fuzzerId 
     * @param {String} userId 
     * @param {String} projectId 
     * @param {module:model/String} action An enumeration.
     * @param {Object} opts Optional parameters
     * @param {String} opts.newName 
     * @param {Boolean} opts.noBackup  (default to false)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Object}
     */
    deleteFuzzer(fuzzerId, userId, projectId, action, opts) {
      return this.deleteFuzzerWithHttpInfo(fuzzerId, userId, projectId, action, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Delete Integration
     * @param {String} integrationId 
     * @param {String} projectId 
     * @param {String} userId 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Object} and HTTP response
     */
    deleteIntegrationWithHttpInfo(integrationId, projectId, userId) {
      let postBody = null;
      // verify the required parameter 'integrationId' is set
      if (integrationId === undefined || integrationId === null) {
        throw new Error("Missing the required parameter 'integrationId' when calling deleteIntegration");
      }
      // verify the required parameter 'projectId' is set
      if (projectId === undefined || projectId === null) {
        throw new Error("Missing the required parameter 'projectId' when calling deleteIntegration");
      }
      // verify the required parameter 'userId' is set
      if (userId === undefined || userId === null) {
        throw new Error("Missing the required parameter 'userId' when calling deleteIntegration");
      }

      let pathParams = {
        'integration_id': integrationId,
        'project_id': projectId,
        'user_id': userId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/api/v1/users/{user_id}/projects/{project_id}/integrations/{integration_id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Delete Integration
     * @param {String} integrationId 
     * @param {String} projectId 
     * @param {String} userId 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Object}
     */
    deleteIntegration(integrationId, projectId, userId) {
      return this.deleteIntegrationWithHttpInfo(integrationId, projectId, userId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Delete Pool
     * @param {String} poolId 
     * @param {String} userId 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Object} and HTTP response
     */
    deletePoolWithHttpInfo(poolId, userId) {
      let postBody = null;
      // verify the required parameter 'poolId' is set
      if (poolId === undefined || poolId === null) {
        throw new Error("Missing the required parameter 'poolId' when calling deletePool");
      }
      // verify the required parameter 'userId' is set
      if (userId === undefined || userId === null) {
        throw new Error("Missing the required parameter 'userId' when calling deletePool");
      }

      let pathParams = {
        'pool_id': poolId,
        'user_id': userId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/api/v1/users/{user_id}/pools/{pool_id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Delete Pool
     * @param {String} poolId 
     * @param {String} userId 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Object}
     */
    deletePool(poolId, userId) {
      return this.deletePoolWithHttpInfo(poolId, userId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Delete Project
     * @param {String} projectId 
     * @param {String} userId 
     * @param {module:model/String} action An enumeration.
     * @param {Object} opts Optional parameters
     * @param {String} opts.newName 
     * @param {Boolean} opts.noBackup  (default to false)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Object} and HTTP response
     */
    deleteProjectWithHttpInfo(projectId, userId, action, opts) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'projectId' is set
      if (projectId === undefined || projectId === null) {
        throw new Error("Missing the required parameter 'projectId' when calling deleteProject");
      }
      // verify the required parameter 'userId' is set
      if (userId === undefined || userId === null) {
        throw new Error("Missing the required parameter 'userId' when calling deleteProject");
      }
      // verify the required parameter 'action' is set
      if (action === undefined || action === null) {
        throw new Error("Missing the required parameter 'action' when calling deleteProject");
      }

      let pathParams = {
        'project_id': projectId,
        'user_id': userId
      };
      let queryParams = {
        'new_name': opts['newName'],
        'action': action,
        'no_backup': opts['noBackup']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/api/v1/users/{user_id}/projects/{project_id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Delete Project
     * @param {String} projectId 
     * @param {String} userId 
     * @param {module:model/String} action An enumeration.
     * @param {Object} opts Optional parameters
     * @param {String} opts.newName 
     * @param {Boolean} opts.noBackup  (default to false)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Object}
     */
    deleteProject(projectId, userId, action, opts) {
      return this.deleteProjectWithHttpInfo(projectId, userId, action, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Delete Revision
     * @param {String} revisionId 
     * @param {String} fuzzerId 
     * @param {String} userId 
     * @param {String} projectId 
     * @param {module:model/String} action An enumeration.
     * @param {Object} opts Optional parameters
     * @param {String} opts.newName 
     * @param {Boolean} opts.noBackup  (default to false)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Object} and HTTP response
     */
    deleteRevisionWithHttpInfo(revisionId, fuzzerId, userId, projectId, action, opts) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'revisionId' is set
      if (revisionId === undefined || revisionId === null) {
        throw new Error("Missing the required parameter 'revisionId' when calling deleteRevision");
      }
      // verify the required parameter 'fuzzerId' is set
      if (fuzzerId === undefined || fuzzerId === null) {
        throw new Error("Missing the required parameter 'fuzzerId' when calling deleteRevision");
      }
      // verify the required parameter 'userId' is set
      if (userId === undefined || userId === null) {
        throw new Error("Missing the required parameter 'userId' when calling deleteRevision");
      }
      // verify the required parameter 'projectId' is set
      if (projectId === undefined || projectId === null) {
        throw new Error("Missing the required parameter 'projectId' when calling deleteRevision");
      }
      // verify the required parameter 'action' is set
      if (action === undefined || action === null) {
        throw new Error("Missing the required parameter 'action' when calling deleteRevision");
      }

      let pathParams = {
        'revision_id': revisionId,
        'fuzzer_id': fuzzerId,
        'user_id': userId,
        'project_id': projectId
      };
      let queryParams = {
        'new_name': opts['newName'],
        'action': action,
        'no_backup': opts['noBackup']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/api/v1/users/{user_id}/projects/{project_id}/fuzzers/{fuzzer_id}/revisions/{revision_id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Delete Revision
     * @param {String} revisionId 
     * @param {String} fuzzerId 
     * @param {String} userId 
     * @param {String} projectId 
     * @param {module:model/String} action An enumeration.
     * @param {Object} opts Optional parameters
     * @param {String} opts.newName 
     * @param {Boolean} opts.noBackup  (default to false)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Object}
     */
    deleteRevision(revisionId, fuzzerId, userId, projectId, action, opts) {
      return this.deleteRevisionWithHttpInfo(revisionId, fuzzerId, userId, projectId, action, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Download Fuzzer Corpus
     * @param {String} projectId 
     * @param {String} fuzzerId 
     * @param {String} userId 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Object} and HTTP response
     */
    downloadFuzzerCorpusWithHttpInfo(projectId, fuzzerId, userId) {
      let postBody = null;
      // verify the required parameter 'projectId' is set
      if (projectId === undefined || projectId === null) {
        throw new Error("Missing the required parameter 'projectId' when calling downloadFuzzerCorpus");
      }
      // verify the required parameter 'fuzzerId' is set
      if (fuzzerId === undefined || fuzzerId === null) {
        throw new Error("Missing the required parameter 'fuzzerId' when calling downloadFuzzerCorpus");
      }
      // verify the required parameter 'userId' is set
      if (userId === undefined || userId === null) {
        throw new Error("Missing the required parameter 'userId' when calling downloadFuzzerCorpus");
      }

      let pathParams = {
        'project_id': projectId,
        'fuzzer_id': fuzzerId,
        'user_id': userId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'application/octet-stream'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/api/v1/users/{user_id}/projects/{project_id}/fuzzers/{fuzzer_id}/files/corpus', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Download Fuzzer Corpus
     * @param {String} projectId 
     * @param {String} fuzzerId 
     * @param {String} userId 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Object}
     */
    downloadFuzzerCorpus(projectId, fuzzerId, userId) {
      return this.downloadFuzzerCorpusWithHttpInfo(projectId, fuzzerId, userId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Download Fuzzer Crash
     * @param {String} fuzzerId 
     * @param {String} crashId 
     * @param {String} userId 
     * @param {String} projectId 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Object} and HTTP response
     */
    downloadFuzzerCrashWithHttpInfo(fuzzerId, crashId, userId, projectId) {
      let postBody = null;
      // verify the required parameter 'fuzzerId' is set
      if (fuzzerId === undefined || fuzzerId === null) {
        throw new Error("Missing the required parameter 'fuzzerId' when calling downloadFuzzerCrash");
      }
      // verify the required parameter 'crashId' is set
      if (crashId === undefined || crashId === null) {
        throw new Error("Missing the required parameter 'crashId' when calling downloadFuzzerCrash");
      }
      // verify the required parameter 'userId' is set
      if (userId === undefined || userId === null) {
        throw new Error("Missing the required parameter 'userId' when calling downloadFuzzerCrash");
      }
      // verify the required parameter 'projectId' is set
      if (projectId === undefined || projectId === null) {
        throw new Error("Missing the required parameter 'projectId' when calling downloadFuzzerCrash");
      }

      let pathParams = {
        'fuzzer_id': fuzzerId,
        'crash_id': crashId,
        'user_id': userId,
        'project_id': projectId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'application/octet-stream'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/api/v1/users/{user_id}/projects/{project_id}/fuzzers/{fuzzer_id}/crashes/{crash_id}/raw', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Download Fuzzer Crash
     * @param {String} fuzzerId 
     * @param {String} crashId 
     * @param {String} userId 
     * @param {String} projectId 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Object}
     */
    downloadFuzzerCrash(fuzzerId, crashId, userId, projectId) {
      return this.downloadFuzzerCrashWithHttpInfo(fuzzerId, crashId, userId, projectId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Download Revision Binaries
     * @param {String} revisionId 
     * @param {String} userId 
     * @param {String} projectId 
     * @param {String} fuzzerId 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Object} and HTTP response
     */
    downloadRevisionBinariesWithHttpInfo(revisionId, userId, projectId, fuzzerId) {
      let postBody = null;
      // verify the required parameter 'revisionId' is set
      if (revisionId === undefined || revisionId === null) {
        throw new Error("Missing the required parameter 'revisionId' when calling downloadRevisionBinaries");
      }
      // verify the required parameter 'userId' is set
      if (userId === undefined || userId === null) {
        throw new Error("Missing the required parameter 'userId' when calling downloadRevisionBinaries");
      }
      // verify the required parameter 'projectId' is set
      if (projectId === undefined || projectId === null) {
        throw new Error("Missing the required parameter 'projectId' when calling downloadRevisionBinaries");
      }
      // verify the required parameter 'fuzzerId' is set
      if (fuzzerId === undefined || fuzzerId === null) {
        throw new Error("Missing the required parameter 'fuzzerId' when calling downloadRevisionBinaries");
      }

      let pathParams = {
        'revision_id': revisionId,
        'user_id': userId,
        'project_id': projectId,
        'fuzzer_id': fuzzerId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'application/octet-stream'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/api/v1/users/{user_id}/projects/{project_id}/fuzzers/{fuzzer_id}/revisions/{revision_id}/files/binaries', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Download Revision Binaries
     * @param {String} revisionId 
     * @param {String} userId 
     * @param {String} projectId 
     * @param {String} fuzzerId 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Object}
     */
    downloadRevisionBinaries(revisionId, userId, projectId, fuzzerId) {
      return this.downloadRevisionBinariesWithHttpInfo(revisionId, userId, projectId, fuzzerId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Download Revision Config
     * @param {String} revisionId 
     * @param {String} userId 
     * @param {String} projectId 
     * @param {String} fuzzerId 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Object} and HTTP response
     */
    downloadRevisionConfigWithHttpInfo(revisionId, userId, projectId, fuzzerId) {
      let postBody = null;
      // verify the required parameter 'revisionId' is set
      if (revisionId === undefined || revisionId === null) {
        throw new Error("Missing the required parameter 'revisionId' when calling downloadRevisionConfig");
      }
      // verify the required parameter 'userId' is set
      if (userId === undefined || userId === null) {
        throw new Error("Missing the required parameter 'userId' when calling downloadRevisionConfig");
      }
      // verify the required parameter 'projectId' is set
      if (projectId === undefined || projectId === null) {
        throw new Error("Missing the required parameter 'projectId' when calling downloadRevisionConfig");
      }
      // verify the required parameter 'fuzzerId' is set
      if (fuzzerId === undefined || fuzzerId === null) {
        throw new Error("Missing the required parameter 'fuzzerId' when calling downloadRevisionConfig");
      }

      let pathParams = {
        'revision_id': revisionId,
        'user_id': userId,
        'project_id': projectId,
        'fuzzer_id': fuzzerId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'application/octet-stream'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/api/v1/users/{user_id}/projects/{project_id}/fuzzers/{fuzzer_id}/revisions/{revision_id}/files/config', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Download Revision Config
     * @param {String} revisionId 
     * @param {String} userId 
     * @param {String} projectId 
     * @param {String} fuzzerId 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Object}
     */
    downloadRevisionConfig(revisionId, userId, projectId, fuzzerId) {
      return this.downloadRevisionConfigWithHttpInfo(revisionId, userId, projectId, fuzzerId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Download Revision Seeds
     * @param {String} revisionId 
     * @param {String} userId 
     * @param {String} projectId 
     * @param {String} fuzzerId 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Object} and HTTP response
     */
    downloadRevisionSeedsWithHttpInfo(revisionId, userId, projectId, fuzzerId) {
      let postBody = null;
      // verify the required parameter 'revisionId' is set
      if (revisionId === undefined || revisionId === null) {
        throw new Error("Missing the required parameter 'revisionId' when calling downloadRevisionSeeds");
      }
      // verify the required parameter 'userId' is set
      if (userId === undefined || userId === null) {
        throw new Error("Missing the required parameter 'userId' when calling downloadRevisionSeeds");
      }
      // verify the required parameter 'projectId' is set
      if (projectId === undefined || projectId === null) {
        throw new Error("Missing the required parameter 'projectId' when calling downloadRevisionSeeds");
      }
      // verify the required parameter 'fuzzerId' is set
      if (fuzzerId === undefined || fuzzerId === null) {
        throw new Error("Missing the required parameter 'fuzzerId' when calling downloadRevisionSeeds");
      }

      let pathParams = {
        'revision_id': revisionId,
        'user_id': userId,
        'project_id': projectId,
        'fuzzer_id': fuzzerId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'application/octet-stream'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/api/v1/users/{user_id}/projects/{project_id}/fuzzers/{fuzzer_id}/revisions/{revision_id}/files/seeds', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Download Revision Seeds
     * @param {String} revisionId 
     * @param {String} userId 
     * @param {String} projectId 
     * @param {String} fuzzerId 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Object}
     */
    downloadRevisionSeeds(revisionId, userId, projectId, fuzzerId) {
      return this.downloadRevisionSeedsWithHttpInfo(revisionId, userId, projectId, fuzzerId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Empty Project Trashbin
     * @param {String} projectId 
     * @param {String} userId 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ProjectTrashbinEmptyResponseModel} and HTTP response
     */
    emptyProjectTrashbinWithHttpInfo(projectId, userId) {
      let postBody = null;
      // verify the required parameter 'projectId' is set
      if (projectId === undefined || projectId === null) {
        throw new Error("Missing the required parameter 'projectId' when calling emptyProjectTrashbin");
      }
      // verify the required parameter 'userId' is set
      if (userId === undefined || userId === null) {
        throw new Error("Missing the required parameter 'userId' when calling emptyProjectTrashbin");
      }

      let pathParams = {
        'project_id': projectId,
        'user_id': userId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ProjectTrashbinEmptyResponseModel;
      return this.apiClient.callApi(
        '/api/v1/users/{user_id}/projects/{project_id}/fuzzers/trashbin', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Empty Project Trashbin
     * @param {String} projectId 
     * @param {String} userId 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ProjectTrashbinEmptyResponseModel}
     */
    emptyProjectTrashbin(projectId, userId) {
      return this.emptyProjectTrashbinWithHttpInfo(projectId, userId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Empty User Trashbin
     * @param {String} userId 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/UserTrashbinEmptyResponseModel} and HTTP response
     */
    emptyUserTrashbinWithHttpInfo(userId) {
      let postBody = null;
      // verify the required parameter 'userId' is set
      if (userId === undefined || userId === null) {
        throw new Error("Missing the required parameter 'userId' when calling emptyUserTrashbin");
      }

      let pathParams = {
        'user_id': userId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = UserTrashbinEmptyResponseModel;
      return this.apiClient.callApi(
        '/api/v1/users/{user_id}/projects/trashbin', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Empty User Trashbin
     * @param {String} userId 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/UserTrashbinEmptyResponseModel}
     */
    emptyUserTrashbin(userId) {
      return this.emptyUserTrashbinWithHttpInfo(userId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Erase Fuzzer In Trashbin
     * @param {String} projectId 
     * @param {String} fuzzerId 
     * @param {String} userId 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ProjectTrashbinEmptyResponseModel} and HTTP response
     */
    eraseFuzzerInTrashbinWithHttpInfo(projectId, fuzzerId, userId) {
      let postBody = null;
      // verify the required parameter 'projectId' is set
      if (projectId === undefined || projectId === null) {
        throw new Error("Missing the required parameter 'projectId' when calling eraseFuzzerInTrashbin");
      }
      // verify the required parameter 'fuzzerId' is set
      if (fuzzerId === undefined || fuzzerId === null) {
        throw new Error("Missing the required parameter 'fuzzerId' when calling eraseFuzzerInTrashbin");
      }
      // verify the required parameter 'userId' is set
      if (userId === undefined || userId === null) {
        throw new Error("Missing the required parameter 'userId' when calling eraseFuzzerInTrashbin");
      }

      let pathParams = {
        'project_id': projectId,
        'fuzzer_id': fuzzerId,
        'user_id': userId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ProjectTrashbinEmptyResponseModel;
      return this.apiClient.callApi(
        '/api/v1/users/{user_id}/projects/{project_id}/fuzzers/trashbin/{fuzzer_id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Erase Fuzzer In Trashbin
     * @param {String} projectId 
     * @param {String} fuzzerId 
     * @param {String} userId 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ProjectTrashbinEmptyResponseModel}
     */
    eraseFuzzerInTrashbin(projectId, fuzzerId, userId) {
      return this.eraseFuzzerInTrashbinWithHttpInfo(projectId, fuzzerId, userId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get Active Revision
     * Get active revision
     * @param {String} userId 
     * @param {String} projectId 
     * @param {String} fuzzerId 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/RevisionResponseModel} and HTTP response
     */
    getActiveRevisionWithHttpInfo(userId, projectId, fuzzerId) {
      let postBody = null;
      // verify the required parameter 'userId' is set
      if (userId === undefined || userId === null) {
        throw new Error("Missing the required parameter 'userId' when calling getActiveRevision");
      }
      // verify the required parameter 'projectId' is set
      if (projectId === undefined || projectId === null) {
        throw new Error("Missing the required parameter 'projectId' when calling getActiveRevision");
      }
      // verify the required parameter 'fuzzerId' is set
      if (fuzzerId === undefined || fuzzerId === null) {
        throw new Error("Missing the required parameter 'fuzzerId' when calling getActiveRevision");
      }

      let pathParams = {
        'user_id': userId,
        'project_id': projectId,
        'fuzzer_id': fuzzerId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = RevisionResponseModel;
      return this.apiClient.callApi(
        '/api/v1/users/{user_id}/projects/{project_id}/fuzzers/{fuzzer_id}/revisions/active', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Get Active Revision
     * Get active revision
     * @param {String} userId 
     * @param {String} projectId 
     * @param {String} fuzzerId 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/RevisionResponseModel}
     */
    getActiveRevision(userId, projectId, fuzzerId) {
      return this.getActiveRevisionWithHttpInfo(userId, projectId, fuzzerId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get Available Pools Count
     * @param {String} userId 
     * @param {Object} opts Optional parameters
     * @param {Number} opts.pgSize  (default to 100)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ItemCountResponseModel} and HTTP response
     */
    getAvailablePoolsCountWithHttpInfo(userId, opts) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'userId' is set
      if (userId === undefined || userId === null) {
        throw new Error("Missing the required parameter 'userId' when calling getAvailablePoolsCount");
      }

      let pathParams = {
        'user_id': userId
      };
      let queryParams = {
        'pg_size': opts['pgSize']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ItemCountResponseModel;
      return this.apiClient.callApi(
        '/api/v1/users/{user_id}/pools/count', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Get Available Pools Count
     * @param {String} userId 
     * @param {Object} opts Optional parameters
     * @param {Number} opts.pgSize  (default to 100)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ItemCountResponseModel}
     */
    getAvailablePoolsCount(userId, opts) {
      return this.getAvailablePoolsCountWithHttpInfo(userId, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get Bug Tracker Integration
     * @param {String} integrationId 
     * @param {String} projectId 
     * @param {String} userId 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/IntegrationResponseModel} and HTTP response
     */
    getBugTrackerIntegrationWithHttpInfo(integrationId, projectId, userId) {
      let postBody = null;
      // verify the required parameter 'integrationId' is set
      if (integrationId === undefined || integrationId === null) {
        throw new Error("Missing the required parameter 'integrationId' when calling getBugTrackerIntegration");
      }
      // verify the required parameter 'projectId' is set
      if (projectId === undefined || projectId === null) {
        throw new Error("Missing the required parameter 'projectId' when calling getBugTrackerIntegration");
      }
      // verify the required parameter 'userId' is set
      if (userId === undefined || userId === null) {
        throw new Error("Missing the required parameter 'userId' when calling getBugTrackerIntegration");
      }

      let pathParams = {
        'integration_id': integrationId,
        'project_id': projectId,
        'user_id': userId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = IntegrationResponseModel;
      return this.apiClient.callApi(
        '/api/v1/users/{user_id}/projects/{project_id}/integrations/{integration_id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Get Bug Tracker Integration
     * @param {String} integrationId 
     * @param {String} projectId 
     * @param {String} userId 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/IntegrationResponseModel}
     */
    getBugTrackerIntegration(integrationId, projectId, userId) {
      return this.getBugTrackerIntegrationWithHttpInfo(integrationId, projectId, userId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get Bug Tracker Integration By Name
     * @param {String} projectId 
     * @param {String} userId 
     * @param {String} name 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/IntegrationResponseModel} and HTTP response
     */
    getBugTrackerIntegrationByNameWithHttpInfo(projectId, userId, name) {
      let postBody = null;
      // verify the required parameter 'projectId' is set
      if (projectId === undefined || projectId === null) {
        throw new Error("Missing the required parameter 'projectId' when calling getBugTrackerIntegrationByName");
      }
      // verify the required parameter 'userId' is set
      if (userId === undefined || userId === null) {
        throw new Error("Missing the required parameter 'userId' when calling getBugTrackerIntegrationByName");
      }
      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling getBugTrackerIntegrationByName");
      }

      let pathParams = {
        'project_id': projectId,
        'user_id': userId
      };
      let queryParams = {
        'name': name
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = IntegrationResponseModel;
      return this.apiClient.callApi(
        '/api/v1/users/{user_id}/projects/{project_id}/integrations/lookup', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Get Bug Tracker Integration By Name
     * @param {String} projectId 
     * @param {String} userId 
     * @param {String} name 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/IntegrationResponseModel}
     */
    getBugTrackerIntegrationByName(projectId, userId, name) {
      return this.getBugTrackerIntegrationByNameWithHttpInfo(projectId, userId, name)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get Bug Tracker Integration Config
     * @param {String} integrationId 
     * @param {String} projectId 
     * @param {String} userId 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Object} and HTTP response
     */
    getBugTrackerIntegrationConfigWithHttpInfo(integrationId, projectId, userId) {
      let postBody = null;
      // verify the required parameter 'integrationId' is set
      if (integrationId === undefined || integrationId === null) {
        throw new Error("Missing the required parameter 'integrationId' when calling getBugTrackerIntegrationConfig");
      }
      // verify the required parameter 'projectId' is set
      if (projectId === undefined || projectId === null) {
        throw new Error("Missing the required parameter 'projectId' when calling getBugTrackerIntegrationConfig");
      }
      // verify the required parameter 'userId' is set
      if (userId === undefined || userId === null) {
        throw new Error("Missing the required parameter 'userId' when calling getBugTrackerIntegrationConfig");
      }

      let pathParams = {
        'integration_id': integrationId,
        'project_id': projectId,
        'user_id': userId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/api/v1/users/{user_id}/projects/{project_id}/integrations/{integration_id}/config', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Get Bug Tracker Integration Config
     * @param {String} integrationId 
     * @param {String} projectId 
     * @param {String} userId 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Object}
     */
    getBugTrackerIntegrationConfig(integrationId, projectId, userId) {
      return this.getBugTrackerIntegrationConfigWithHttpInfo(integrationId, projectId, userId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get Count Of Bug Tracker Integrations
     * @param {String} projectId 
     * @param {String} userId 
     * @param {Object} opts Optional parameters
     * @param {Number} opts.pgSize  (default to 100)
     * @param {Array.<module:model/ORMIntegrationTypeID>} opts.types 
     * @param {Array.<module:model/ORMIntegrationStatus>} opts.statuses 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ItemCountResponseModel} and HTTP response
     */
    getCountOfBugTrackerIntegrationsWithHttpInfo(projectId, userId, opts) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'projectId' is set
      if (projectId === undefined || projectId === null) {
        throw new Error("Missing the required parameter 'projectId' when calling getCountOfBugTrackerIntegrations");
      }
      // verify the required parameter 'userId' is set
      if (userId === undefined || userId === null) {
        throw new Error("Missing the required parameter 'userId' when calling getCountOfBugTrackerIntegrations");
      }

      let pathParams = {
        'project_id': projectId,
        'user_id': userId
      };
      let queryParams = {
        'pg_size': opts['pgSize'],
        'types': this.apiClient.buildCollectionParam(opts['types'], 'multi'),
        'statuses': this.apiClient.buildCollectionParam(opts['statuses'], 'multi')
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ItemCountResponseModel;
      return this.apiClient.callApi(
        '/api/v1/users/{user_id}/projects/{project_id}/integrations/count', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Get Count Of Bug Tracker Integrations
     * @param {String} projectId 
     * @param {String} userId 
     * @param {Object} opts Optional parameters
     * @param {Number} opts.pgSize  (default to 100)
     * @param {Array.<module:model/ORMIntegrationTypeID>} opts.types 
     * @param {Array.<module:model/ORMIntegrationStatus>} opts.statuses 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ItemCountResponseModel}
     */
    getCountOfBugTrackerIntegrations(projectId, userId, opts) {
      return this.getCountOfBugTrackerIntegrationsWithHttpInfo(projectId, userId, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get Fuzzer
     * @param {String} projectId 
     * @param {String} fuzzerId 
     * @param {String} userId 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/FuzzerResponseModel} and HTTP response
     */
    getFuzzerWithHttpInfo(projectId, fuzzerId, userId) {
      let postBody = null;
      // verify the required parameter 'projectId' is set
      if (projectId === undefined || projectId === null) {
        throw new Error("Missing the required parameter 'projectId' when calling getFuzzer");
      }
      // verify the required parameter 'fuzzerId' is set
      if (fuzzerId === undefined || fuzzerId === null) {
        throw new Error("Missing the required parameter 'fuzzerId' when calling getFuzzer");
      }
      // verify the required parameter 'userId' is set
      if (userId === undefined || userId === null) {
        throw new Error("Missing the required parameter 'userId' when calling getFuzzer");
      }

      let pathParams = {
        'project_id': projectId,
        'fuzzer_id': fuzzerId,
        'user_id': userId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = FuzzerResponseModel;
      return this.apiClient.callApi(
        '/api/v1/users/{user_id}/projects/{project_id}/fuzzers/{fuzzer_id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Get Fuzzer
     * @param {String} projectId 
     * @param {String} fuzzerId 
     * @param {String} userId 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/FuzzerResponseModel}
     */
    getFuzzer(projectId, fuzzerId, userId) {
      return this.getFuzzerWithHttpInfo(projectId, fuzzerId, userId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get Fuzzer By Name
     * @param {String} projectId 
     * @param {String} userId 
     * @param {String} name 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/FuzzerResponseModel} and HTTP response
     */
    getFuzzerByNameWithHttpInfo(projectId, userId, name) {
      let postBody = null;
      // verify the required parameter 'projectId' is set
      if (projectId === undefined || projectId === null) {
        throw new Error("Missing the required parameter 'projectId' when calling getFuzzerByName");
      }
      // verify the required parameter 'userId' is set
      if (userId === undefined || userId === null) {
        throw new Error("Missing the required parameter 'userId' when calling getFuzzerByName");
      }
      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling getFuzzerByName");
      }

      let pathParams = {
        'project_id': projectId,
        'user_id': userId
      };
      let queryParams = {
        'name': name
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = FuzzerResponseModel;
      return this.apiClient.callApi(
        '/api/v1/users/{user_id}/projects/{project_id}/fuzzers/lookup', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Get Fuzzer By Name
     * @param {String} projectId 
     * @param {String} userId 
     * @param {String} name 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/FuzzerResponseModel}
     */
    getFuzzerByName(projectId, userId, name) {
      return this.getFuzzerByNameWithHttpInfo(projectId, userId, name)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get Fuzzer Count
     * @param {String} projectId 
     * @param {String} userId 
     * @param {Object} opts Optional parameters
     * @param {Number} opts.pgSize  (default to 100)
     * @param {Array.<module:model/ORMEngineID>} opts.engines 
     * @param {Array.<module:model/ORMLangID>} opts.langs 
     * @param {module:model/String} opts.removalState An enumeration.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ItemCountResponseModel} and HTTP response
     */
    getFuzzerCountWithHttpInfo(projectId, userId, opts) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'projectId' is set
      if (projectId === undefined || projectId === null) {
        throw new Error("Missing the required parameter 'projectId' when calling getFuzzerCount");
      }
      // verify the required parameter 'userId' is set
      if (userId === undefined || userId === null) {
        throw new Error("Missing the required parameter 'userId' when calling getFuzzerCount");
      }

      let pathParams = {
        'project_id': projectId,
        'user_id': userId
      };
      let queryParams = {
        'pg_size': opts['pgSize'],
        'engines': this.apiClient.buildCollectionParam(opts['engines'], 'multi'),
        'langs': this.apiClient.buildCollectionParam(opts['langs'], 'multi'),
        'removal_state': opts['removalState']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ItemCountResponseModel;
      return this.apiClient.callApi(
        '/api/v1/users/{user_id}/projects/{project_id}/fuzzers/count', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Get Fuzzer Count
     * @param {String} projectId 
     * @param {String} userId 
     * @param {Object} opts Optional parameters
     * @param {Number} opts.pgSize  (default to 100)
     * @param {Array.<module:model/ORMEngineID>} opts.engines 
     * @param {Array.<module:model/ORMLangID>} opts.langs 
     * @param {module:model/String} opts.removalState An enumeration.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ItemCountResponseModel}
     */
    getFuzzerCount(projectId, userId, opts) {
      return this.getFuzzerCountWithHttpInfo(projectId, userId, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get Fuzzer Crash
     * @param {String} fuzzerId 
     * @param {String} crashId 
     * @param {String} userId 
     * @param {String} projectId 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/CrashResponseModel} and HTTP response
     */
    getFuzzerCrashWithHttpInfo(fuzzerId, crashId, userId, projectId) {
      let postBody = null;
      // verify the required parameter 'fuzzerId' is set
      if (fuzzerId === undefined || fuzzerId === null) {
        throw new Error("Missing the required parameter 'fuzzerId' when calling getFuzzerCrash");
      }
      // verify the required parameter 'crashId' is set
      if (crashId === undefined || crashId === null) {
        throw new Error("Missing the required parameter 'crashId' when calling getFuzzerCrash");
      }
      // verify the required parameter 'userId' is set
      if (userId === undefined || userId === null) {
        throw new Error("Missing the required parameter 'userId' when calling getFuzzerCrash");
      }
      // verify the required parameter 'projectId' is set
      if (projectId === undefined || projectId === null) {
        throw new Error("Missing the required parameter 'projectId' when calling getFuzzerCrash");
      }

      let pathParams = {
        'fuzzer_id': fuzzerId,
        'crash_id': crashId,
        'user_id': userId,
        'project_id': projectId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = CrashResponseModel;
      return this.apiClient.callApi(
        '/api/v1/users/{user_id}/projects/{project_id}/fuzzers/{fuzzer_id}/crashes/{crash_id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Get Fuzzer Crash
     * @param {String} fuzzerId 
     * @param {String} crashId 
     * @param {String} userId 
     * @param {String} projectId 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/CrashResponseModel}
     */
    getFuzzerCrash(fuzzerId, crashId, userId, projectId) {
      return this.getFuzzerCrashWithHttpInfo(fuzzerId, crashId, userId, projectId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get Pool
     * @param {String} userId 
     * @param {String} poolId 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/PoolResponseModel} and HTTP response
     */
    getPoolWithHttpInfo(userId, poolId) {
      let postBody = null;
      // verify the required parameter 'userId' is set
      if (userId === undefined || userId === null) {
        throw new Error("Missing the required parameter 'userId' when calling getPool");
      }
      // verify the required parameter 'poolId' is set
      if (poolId === undefined || poolId === null) {
        throw new Error("Missing the required parameter 'poolId' when calling getPool");
      }

      let pathParams = {
        'user_id': userId,
        'pool_id': poolId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = PoolResponseModel;
      return this.apiClient.callApi(
        '/api/v1/users/{user_id}/pools/{pool_id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Get Pool
     * @param {String} userId 
     * @param {String} poolId 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/PoolResponseModel}
     */
    getPool(userId, poolId) {
      return this.getPoolWithHttpInfo(userId, poolId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get Project
     * @param {String} userId 
     * @param {String} projectId 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ProjectResponseModel} and HTTP response
     */
    getProjectWithHttpInfo(userId, projectId) {
      let postBody = null;
      // verify the required parameter 'userId' is set
      if (userId === undefined || userId === null) {
        throw new Error("Missing the required parameter 'userId' when calling getProject");
      }
      // verify the required parameter 'projectId' is set
      if (projectId === undefined || projectId === null) {
        throw new Error("Missing the required parameter 'projectId' when calling getProject");
      }

      let pathParams = {
        'user_id': userId,
        'project_id': projectId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ProjectResponseModel;
      return this.apiClient.callApi(
        '/api/v1/users/{user_id}/projects/{project_id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Get Project
     * @param {String} userId 
     * @param {String} projectId 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ProjectResponseModel}
     */
    getProject(userId, projectId) {
      return this.getProjectWithHttpInfo(userId, projectId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get Project By Name
     * @param {String} userId 
     * @param {String} name 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ProjectResponseModel} and HTTP response
     */
    getProjectByNameWithHttpInfo(userId, name) {
      let postBody = null;
      // verify the required parameter 'userId' is set
      if (userId === undefined || userId === null) {
        throw new Error("Missing the required parameter 'userId' when calling getProjectByName");
      }
      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling getProjectByName");
      }

      let pathParams = {
        'user_id': userId
      };
      let queryParams = {
        'name': name
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ProjectResponseModel;
      return this.apiClient.callApi(
        '/api/v1/users/{user_id}/projects/lookup', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Get Project By Name
     * @param {String} userId 
     * @param {String} name 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ProjectResponseModel}
     */
    getProjectByName(userId, name) {
      return this.getProjectByNameWithHttpInfo(userId, name)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get Project Count
     * @param {String} userId 
     * @param {Object} opts Optional parameters
     * @param {Number} opts.pgSize  (default to 100)
     * @param {module:model/String} opts.removalState An enumeration.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ItemCountResponseModel} and HTTP response
     */
    getProjectCountWithHttpInfo(userId, opts) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'userId' is set
      if (userId === undefined || userId === null) {
        throw new Error("Missing the required parameter 'userId' when calling getProjectCount");
      }

      let pathParams = {
        'user_id': userId
      };
      let queryParams = {
        'pg_size': opts['pgSize'],
        'removal_state': opts['removalState']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ItemCountResponseModel;
      return this.apiClient.callApi(
        '/api/v1/users/{user_id}/projects/count', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Get Project Count
     * @param {String} userId 
     * @param {Object} opts Optional parameters
     * @param {Number} opts.pgSize  (default to 100)
     * @param {module:model/String} opts.removalState An enumeration.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ItemCountResponseModel}
     */
    getProjectCount(userId, opts) {
      return this.getProjectCountWithHttpInfo(userId, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get Project Image
     * Returns project image
     * @param {String} projectId 
     * @param {String} imageId 
     * @param {String} userId 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ImageResponseModel} and HTTP response
     */
    getProjectImageWithHttpInfo(projectId, imageId, userId) {
      let postBody = null;
      // verify the required parameter 'projectId' is set
      if (projectId === undefined || projectId === null) {
        throw new Error("Missing the required parameter 'projectId' when calling getProjectImage");
      }
      // verify the required parameter 'imageId' is set
      if (imageId === undefined || imageId === null) {
        throw new Error("Missing the required parameter 'imageId' when calling getProjectImage");
      }
      // verify the required parameter 'userId' is set
      if (userId === undefined || userId === null) {
        throw new Error("Missing the required parameter 'userId' when calling getProjectImage");
      }

      let pathParams = {
        'project_id': projectId,
        'image_id': imageId,
        'user_id': userId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ImageResponseModel;
      return this.apiClient.callApi(
        '/api/v1/users/{user_id}/projects/{project_id}/images/{image_id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Get Project Image
     * Returns project image
     * @param {String} projectId 
     * @param {String} imageId 
     * @param {String} userId 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ImageResponseModel}
     */
    getProjectImage(projectId, imageId, userId) {
      return this.getProjectImageWithHttpInfo(projectId, imageId, userId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get Revision
     * @param {String} revisionId 
     * @param {String} fuzzerId 
     * @param {String} userId 
     * @param {String} projectId 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/RevisionResponseModel} and HTTP response
     */
    getRevisionWithHttpInfo(revisionId, fuzzerId, userId, projectId) {
      let postBody = null;
      // verify the required parameter 'revisionId' is set
      if (revisionId === undefined || revisionId === null) {
        throw new Error("Missing the required parameter 'revisionId' when calling getRevision");
      }
      // verify the required parameter 'fuzzerId' is set
      if (fuzzerId === undefined || fuzzerId === null) {
        throw new Error("Missing the required parameter 'fuzzerId' when calling getRevision");
      }
      // verify the required parameter 'userId' is set
      if (userId === undefined || userId === null) {
        throw new Error("Missing the required parameter 'userId' when calling getRevision");
      }
      // verify the required parameter 'projectId' is set
      if (projectId === undefined || projectId === null) {
        throw new Error("Missing the required parameter 'projectId' when calling getRevision");
      }

      let pathParams = {
        'revision_id': revisionId,
        'fuzzer_id': fuzzerId,
        'user_id': userId,
        'project_id': projectId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = RevisionResponseModel;
      return this.apiClient.callApi(
        '/api/v1/users/{user_id}/projects/{project_id}/fuzzers/{fuzzer_id}/revisions/{revision_id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Get Revision
     * @param {String} revisionId 
     * @param {String} fuzzerId 
     * @param {String} userId 
     * @param {String} projectId 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/RevisionResponseModel}
     */
    getRevision(revisionId, fuzzerId, userId, projectId) {
      return this.getRevisionWithHttpInfo(revisionId, fuzzerId, userId, projectId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get Revision By Name
     * @param {String} fuzzerId 
     * @param {String} userId 
     * @param {String} projectId 
     * @param {String} name 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/RevisionResponseModel} and HTTP response
     */
    getRevisionByNameWithHttpInfo(fuzzerId, userId, projectId, name) {
      let postBody = null;
      // verify the required parameter 'fuzzerId' is set
      if (fuzzerId === undefined || fuzzerId === null) {
        throw new Error("Missing the required parameter 'fuzzerId' when calling getRevisionByName");
      }
      // verify the required parameter 'userId' is set
      if (userId === undefined || userId === null) {
        throw new Error("Missing the required parameter 'userId' when calling getRevisionByName");
      }
      // verify the required parameter 'projectId' is set
      if (projectId === undefined || projectId === null) {
        throw new Error("Missing the required parameter 'projectId' when calling getRevisionByName");
      }
      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling getRevisionByName");
      }

      let pathParams = {
        'fuzzer_id': fuzzerId,
        'user_id': userId,
        'project_id': projectId
      };
      let queryParams = {
        'name': name
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = RevisionResponseModel;
      return this.apiClient.callApi(
        '/api/v1/users/{user_id}/projects/{project_id}/fuzzers/{fuzzer_id}/revisions/lookup', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Get Revision By Name
     * @param {String} fuzzerId 
     * @param {String} userId 
     * @param {String} projectId 
     * @param {String} name 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/RevisionResponseModel}
     */
    getRevisionByName(fuzzerId, userId, projectId, name) {
      return this.getRevisionByNameWithHttpInfo(fuzzerId, userId, projectId, name)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get Revision Count
     * @param {String} fuzzerId 
     * @param {String} userId 
     * @param {String} projectId 
     * @param {Object} opts Optional parameters
     * @param {Number} opts.pgSize  (default to 100)
     * @param {module:model/String} opts.removalState An enumeration.
     * @param {Array.<module:model/ORMRevisionStatus>} opts.statuses 
     * @param {Array.<module:model/ORMHealth>} opts.health 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ItemCountResponseModel} and HTTP response
     */
    getRevisionCountWithHttpInfo(fuzzerId, userId, projectId, opts) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'fuzzerId' is set
      if (fuzzerId === undefined || fuzzerId === null) {
        throw new Error("Missing the required parameter 'fuzzerId' when calling getRevisionCount");
      }
      // verify the required parameter 'userId' is set
      if (userId === undefined || userId === null) {
        throw new Error("Missing the required parameter 'userId' when calling getRevisionCount");
      }
      // verify the required parameter 'projectId' is set
      if (projectId === undefined || projectId === null) {
        throw new Error("Missing the required parameter 'projectId' when calling getRevisionCount");
      }

      let pathParams = {
        'fuzzer_id': fuzzerId,
        'user_id': userId,
        'project_id': projectId
      };
      let queryParams = {
        'pg_size': opts['pgSize'],
        'removal_state': opts['removalState'],
        'statuses': this.apiClient.buildCollectionParam(opts['statuses'], 'multi'),
        'health': this.apiClient.buildCollectionParam(opts['health'], 'multi')
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ItemCountResponseModel;
      return this.apiClient.callApi(
        '/api/v1/users/{user_id}/projects/{project_id}/fuzzers/{fuzzer_id}/revisions/count', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Get Revision Count
     * @param {String} fuzzerId 
     * @param {String} userId 
     * @param {String} projectId 
     * @param {Object} opts Optional parameters
     * @param {Number} opts.pgSize  (default to 100)
     * @param {module:model/String} opts.removalState An enumeration.
     * @param {Array.<module:model/ORMRevisionStatus>} opts.statuses 
     * @param {Array.<module:model/ORMHealth>} opts.health 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ItemCountResponseModel}
     */
    getRevisionCount(fuzzerId, userId, projectId, opts) {
      return this.getRevisionCountWithHttpInfo(fuzzerId, userId, projectId, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get Self User
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/UserResponseModel} and HTTP response
     */
    getSelfUserWithHttpInfo() {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = UserResponseModel;
      return this.apiClient.callApi(
        '/api/v1/users/self', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Get Self User
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/UserResponseModel}
     */
    getSelfUser() {
      return this.getSelfUserWithHttpInfo()
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get Trashbin Fuzzers Count
     * @param {String} projectId 
     * @param {String} userId 
     * @param {Object} opts Optional parameters
     * @param {Number} opts.pgSize  (default to 100)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ItemCountResponseModel} and HTTP response
     */
    getTrashbinFuzzersCountWithHttpInfo(projectId, userId, opts) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'projectId' is set
      if (projectId === undefined || projectId === null) {
        throw new Error("Missing the required parameter 'projectId' when calling getTrashbinFuzzersCount");
      }
      // verify the required parameter 'userId' is set
      if (userId === undefined || userId === null) {
        throw new Error("Missing the required parameter 'userId' when calling getTrashbinFuzzersCount");
      }

      let pathParams = {
        'project_id': projectId,
        'user_id': userId
      };
      let queryParams = {
        'pg_size': opts['pgSize']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ItemCountResponseModel;
      return this.apiClient.callApi(
        '/api/v1/users/{user_id}/projects/{project_id}/fuzzers/trashbin/count', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Get Trashbin Fuzzers Count
     * @param {String} projectId 
     * @param {String} userId 
     * @param {Object} opts Optional parameters
     * @param {Number} opts.pgSize  (default to 100)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ItemCountResponseModel}
     */
    getTrashbinFuzzersCount(projectId, userId, opts) {
      return this.getTrashbinFuzzersCountWithHttpInfo(projectId, userId, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * List Fuzzer Crashes
     * @param {String} fuzzerId 
     * @param {String} userId 
     * @param {String} projectId 
     * @param {Object} opts Optional parameters
     * @param {Number} opts.pgSize  (default to 100)
     * @param {Number} opts.pgNum  (default to 0)
     * @param {String} opts.dateBegin 
     * @param {String} opts.dateEnd 
     * @param {Boolean} opts.archived 
     * @param {Boolean} opts.reproduced 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ListCrashesResponseModel} and HTTP response
     */
    listFuzzerCrashesWithHttpInfo(fuzzerId, userId, projectId, opts) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'fuzzerId' is set
      if (fuzzerId === undefined || fuzzerId === null) {
        throw new Error("Missing the required parameter 'fuzzerId' when calling listFuzzerCrashes");
      }
      // verify the required parameter 'userId' is set
      if (userId === undefined || userId === null) {
        throw new Error("Missing the required parameter 'userId' when calling listFuzzerCrashes");
      }
      // verify the required parameter 'projectId' is set
      if (projectId === undefined || projectId === null) {
        throw new Error("Missing the required parameter 'projectId' when calling listFuzzerCrashes");
      }

      let pathParams = {
        'fuzzer_id': fuzzerId,
        'user_id': userId,
        'project_id': projectId
      };
      let queryParams = {
        'pg_size': opts['pgSize'],
        'pg_num': opts['pgNum'],
        'date_begin': opts['dateBegin'],
        'date_end': opts['dateEnd'],
        'archived': opts['archived'],
        'reproduced': opts['reproduced']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ListCrashesResponseModel;
      return this.apiClient.callApi(
        '/api/v1/users/{user_id}/projects/{project_id}/fuzzers/{fuzzer_id}/crashes', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * List Fuzzer Crashes
     * @param {String} fuzzerId 
     * @param {String} userId 
     * @param {String} projectId 
     * @param {Object} opts Optional parameters
     * @param {Number} opts.pgSize  (default to 100)
     * @param {Number} opts.pgNum  (default to 0)
     * @param {String} opts.dateBegin 
     * @param {String} opts.dateEnd 
     * @param {Boolean} opts.archived 
     * @param {Boolean} opts.reproduced 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ListCrashesResponseModel}
     */
    listFuzzerCrashes(fuzzerId, userId, projectId, opts) {
      return this.listFuzzerCrashesWithHttpInfo(fuzzerId, userId, projectId, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * List Fuzzer Statistics
     * @param {String} userId 
     * @param {String} projectId 
     * @param {String} fuzzerId 
     * @param {module:model/String} groupBy An enumeration.
     * @param {Object} opts Optional parameters
     * @param {Number} opts.pgSize  (default to 100)
     * @param {Number} opts.pgNum  (default to 0)
     * @param {String} opts.dateBegin 
     * @param {String} opts.dateEnd 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ListStatisticsResponseModel} and HTTP response
     */
    listFuzzerStatisticsWithHttpInfo(userId, projectId, fuzzerId, groupBy, opts) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'userId' is set
      if (userId === undefined || userId === null) {
        throw new Error("Missing the required parameter 'userId' when calling listFuzzerStatistics");
      }
      // verify the required parameter 'projectId' is set
      if (projectId === undefined || projectId === null) {
        throw new Error("Missing the required parameter 'projectId' when calling listFuzzerStatistics");
      }
      // verify the required parameter 'fuzzerId' is set
      if (fuzzerId === undefined || fuzzerId === null) {
        throw new Error("Missing the required parameter 'fuzzerId' when calling listFuzzerStatistics");
      }
      // verify the required parameter 'groupBy' is set
      if (groupBy === undefined || groupBy === null) {
        throw new Error("Missing the required parameter 'groupBy' when calling listFuzzerStatistics");
      }

      let pathParams = {
        'user_id': userId,
        'project_id': projectId,
        'fuzzer_id': fuzzerId
      };
      let queryParams = {
        'pg_size': opts['pgSize'],
        'pg_num': opts['pgNum'],
        'group_by': groupBy,
        'date_begin': opts['dateBegin'],
        'date_end': opts['dateEnd']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ListStatisticsResponseModel;
      return this.apiClient.callApi(
        '/api/v1/users/{user_id}/projects/{project_id}/fuzzers/{fuzzer_id}/statistics', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * List Fuzzer Statistics
     * @param {String} userId 
     * @param {String} projectId 
     * @param {String} fuzzerId 
     * @param {module:model/String} groupBy An enumeration.
     * @param {Object} opts Optional parameters
     * @param {Number} opts.pgSize  (default to 100)
     * @param {Number} opts.pgNum  (default to 0)
     * @param {String} opts.dateBegin 
     * @param {String} opts.dateEnd 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ListStatisticsResponseModel}
     */
    listFuzzerStatistics(userId, projectId, fuzzerId, groupBy, opts) {
      return this.listFuzzerStatisticsWithHttpInfo(userId, projectId, fuzzerId, groupBy, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * List Fuzzers
     * @param {String} projectId 
     * @param {String} userId 
     * @param {Object} opts Optional parameters
     * @param {Number} opts.pgSize  (default to 100)
     * @param {Number} opts.pgNum  (default to 0)
     * @param {Array.<module:model/ORMEngineID>} opts.engines 
     * @param {Array.<module:model/ORMLangID>} opts.langs 
     * @param {module:model/String} opts.removalState An enumeration.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ListFuzzersResponseModel} and HTTP response
     */
    listFuzzersWithHttpInfo(projectId, userId, opts) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'projectId' is set
      if (projectId === undefined || projectId === null) {
        throw new Error("Missing the required parameter 'projectId' when calling listFuzzers");
      }
      // verify the required parameter 'userId' is set
      if (userId === undefined || userId === null) {
        throw new Error("Missing the required parameter 'userId' when calling listFuzzers");
      }

      let pathParams = {
        'project_id': projectId,
        'user_id': userId
      };
      let queryParams = {
        'pg_size': opts['pgSize'],
        'pg_num': opts['pgNum'],
        'engines': this.apiClient.buildCollectionParam(opts['engines'], 'multi'),
        'langs': this.apiClient.buildCollectionParam(opts['langs'], 'multi'),
        'removal_state': opts['removalState']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ListFuzzersResponseModel;
      return this.apiClient.callApi(
        '/api/v1/users/{user_id}/projects/{project_id}/fuzzers', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * List Fuzzers
     * @param {String} projectId 
     * @param {String} userId 
     * @param {Object} opts Optional parameters
     * @param {Number} opts.pgSize  (default to 100)
     * @param {Number} opts.pgNum  (default to 0)
     * @param {Array.<module:model/ORMEngineID>} opts.engines 
     * @param {Array.<module:model/ORMLangID>} opts.langs 
     * @param {module:model/String} opts.removalState An enumeration.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ListFuzzersResponseModel}
     */
    listFuzzers(projectId, userId, opts) {
      return this.listFuzzersWithHttpInfo(projectId, userId, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * List Integrations
     * @param {String} projectId 
     * @param {String} userId 
     * @param {Object} opts Optional parameters
     * @param {Number} opts.pgSize  (default to 100)
     * @param {Number} opts.pgNum  (default to 0)
     * @param {Array.<module:model/ORMIntegrationTypeID>} opts.types 
     * @param {Array.<module:model/ORMIntegrationStatus>} opts.statuses 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ListIntegrationsResponseModel} and HTTP response
     */
    listIntegrationsWithHttpInfo(projectId, userId, opts) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'projectId' is set
      if (projectId === undefined || projectId === null) {
        throw new Error("Missing the required parameter 'projectId' when calling listIntegrations");
      }
      // verify the required parameter 'userId' is set
      if (userId === undefined || userId === null) {
        throw new Error("Missing the required parameter 'userId' when calling listIntegrations");
      }

      let pathParams = {
        'project_id': projectId,
        'user_id': userId
      };
      let queryParams = {
        'pg_size': opts['pgSize'],
        'pg_num': opts['pgNum'],
        'types': this.apiClient.buildCollectionParam(opts['types'], 'multi'),
        'statuses': this.apiClient.buildCollectionParam(opts['statuses'], 'multi')
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ListIntegrationsResponseModel;
      return this.apiClient.callApi(
        '/api/v1/users/{user_id}/projects/{project_id}/integrations', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * List Integrations
     * @param {String} projectId 
     * @param {String} userId 
     * @param {Object} opts Optional parameters
     * @param {Number} opts.pgSize  (default to 100)
     * @param {Number} opts.pgNum  (default to 0)
     * @param {Array.<module:model/ORMIntegrationTypeID>} opts.types 
     * @param {Array.<module:model/ORMIntegrationStatus>} opts.statuses 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ListIntegrationsResponseModel}
     */
    listIntegrations(projectId, userId, opts) {
      return this.listIntegrationsWithHttpInfo(projectId, userId, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * List Pools
     * @param {String} userId 
     * @param {Object} opts Optional parameters
     * @param {Number} opts.pgSize  (default to 100)
     * @param {Number} opts.pgNum  (default to 0)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ListPoolsResponseModel} and HTTP response
     */
    listPoolsWithHttpInfo(userId, opts) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'userId' is set
      if (userId === undefined || userId === null) {
        throw new Error("Missing the required parameter 'userId' when calling listPools");
      }

      let pathParams = {
        'user_id': userId
      };
      let queryParams = {
        'pg_size': opts['pgSize'],
        'pg_num': opts['pgNum']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ListPoolsResponseModel;
      return this.apiClient.callApi(
        '/api/v1/users/{user_id}/pools', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * List Pools
     * @param {String} userId 
     * @param {Object} opts Optional parameters
     * @param {Number} opts.pgSize  (default to 100)
     * @param {Number} opts.pgNum  (default to 0)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ListPoolsResponseModel}
     */
    listPools(userId, opts) {
      return this.listPoolsWithHttpInfo(userId, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * List Project Images
     * Returns list of docker images corresponding to provided fuzzer type in project
     * @param {String} projectId 
     * @param {String} userId 
     * @param {Object} opts Optional parameters
     * @param {Number} opts.pgSize  (default to 100)
     * @param {Number} opts.pgNum  (default to 0)
     * @param {Array.<module:model/ORMEngineID>} opts.engines 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ListImagesResponseModel} and HTTP response
     */
    listProjectImagesWithHttpInfo(projectId, userId, opts) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'projectId' is set
      if (projectId === undefined || projectId === null) {
        throw new Error("Missing the required parameter 'projectId' when calling listProjectImages");
      }
      // verify the required parameter 'userId' is set
      if (userId === undefined || userId === null) {
        throw new Error("Missing the required parameter 'userId' when calling listProjectImages");
      }

      let pathParams = {
        'project_id': projectId,
        'user_id': userId
      };
      let queryParams = {
        'pg_size': opts['pgSize'],
        'pg_num': opts['pgNum'],
        'engines': this.apiClient.buildCollectionParam(opts['engines'], 'multi')
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ListImagesResponseModel;
      return this.apiClient.callApi(
        '/api/v1/users/{user_id}/projects/{project_id}/images', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * List Project Images
     * Returns list of docker images corresponding to provided fuzzer type in project
     * @param {String} projectId 
     * @param {String} userId 
     * @param {Object} opts Optional parameters
     * @param {Number} opts.pgSize  (default to 100)
     * @param {Number} opts.pgNum  (default to 0)
     * @param {Array.<module:model/ORMEngineID>} opts.engines 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ListImagesResponseModel}
     */
    listProjectImages(projectId, userId, opts) {
      return this.listProjectImagesWithHttpInfo(projectId, userId, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * List Projects
     * @param {String} userId 
     * @param {Object} opts Optional parameters
     * @param {Number} opts.pgSize  (default to 100)
     * @param {Number} opts.pgNum  (default to 0)
     * @param {module:model/String} opts.removalState An enumeration.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ListProjectsResponseModel} and HTTP response
     */
    listProjectsWithHttpInfo(userId, opts) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'userId' is set
      if (userId === undefined || userId === null) {
        throw new Error("Missing the required parameter 'userId' when calling listProjects");
      }

      let pathParams = {
        'user_id': userId
      };
      let queryParams = {
        'pg_size': opts['pgSize'],
        'pg_num': opts['pgNum'],
        'removal_state': opts['removalState']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ListProjectsResponseModel;
      return this.apiClient.callApi(
        '/api/v1/users/{user_id}/projects', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * List Projects
     * @param {String} userId 
     * @param {Object} opts Optional parameters
     * @param {Number} opts.pgSize  (default to 100)
     * @param {Number} opts.pgNum  (default to 0)
     * @param {module:model/String} opts.removalState An enumeration.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ListProjectsResponseModel}
     */
    listProjects(userId, opts) {
      return this.listProjectsWithHttpInfo(userId, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * List Revision Crashes
     * @param {String} revisionId 
     * @param {String} userId 
     * @param {String} projectId 
     * @param {String} fuzzerId 
     * @param {Object} opts Optional parameters
     * @param {Number} opts.pgSize  (default to 100)
     * @param {Number} opts.pgNum  (default to 0)
     * @param {String} opts.dateBegin 
     * @param {String} opts.dateEnd 
     * @param {Boolean} opts.archived 
     * @param {Boolean} opts.reproduced 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ListCrashesResponseModel} and HTTP response
     */
    listRevisionCrashesWithHttpInfo(revisionId, userId, projectId, fuzzerId, opts) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'revisionId' is set
      if (revisionId === undefined || revisionId === null) {
        throw new Error("Missing the required parameter 'revisionId' when calling listRevisionCrashes");
      }
      // verify the required parameter 'userId' is set
      if (userId === undefined || userId === null) {
        throw new Error("Missing the required parameter 'userId' when calling listRevisionCrashes");
      }
      // verify the required parameter 'projectId' is set
      if (projectId === undefined || projectId === null) {
        throw new Error("Missing the required parameter 'projectId' when calling listRevisionCrashes");
      }
      // verify the required parameter 'fuzzerId' is set
      if (fuzzerId === undefined || fuzzerId === null) {
        throw new Error("Missing the required parameter 'fuzzerId' when calling listRevisionCrashes");
      }

      let pathParams = {
        'revision_id': revisionId,
        'user_id': userId,
        'project_id': projectId,
        'fuzzer_id': fuzzerId
      };
      let queryParams = {
        'pg_size': opts['pgSize'],
        'pg_num': opts['pgNum'],
        'date_begin': opts['dateBegin'],
        'date_end': opts['dateEnd'],
        'archived': opts['archived'],
        'reproduced': opts['reproduced']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ListCrashesResponseModel;
      return this.apiClient.callApi(
        '/api/v1/users/{user_id}/projects/{project_id}/fuzzers/{fuzzer_id}/revisions/{revision_id}/crashes', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * List Revision Crashes
     * @param {String} revisionId 
     * @param {String} userId 
     * @param {String} projectId 
     * @param {String} fuzzerId 
     * @param {Object} opts Optional parameters
     * @param {Number} opts.pgSize  (default to 100)
     * @param {Number} opts.pgNum  (default to 0)
     * @param {String} opts.dateBegin 
     * @param {String} opts.dateEnd 
     * @param {Boolean} opts.archived 
     * @param {Boolean} opts.reproduced 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ListCrashesResponseModel}
     */
    listRevisionCrashes(revisionId, userId, projectId, fuzzerId, opts) {
      return this.listRevisionCrashesWithHttpInfo(revisionId, userId, projectId, fuzzerId, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * List Revision Statistics
     * @param {String} userId 
     * @param {String} projectId 
     * @param {String} fuzzerId 
     * @param {String} revisionId 
     * @param {module:model/String} groupBy An enumeration.
     * @param {Object} opts Optional parameters
     * @param {Number} opts.pgSize  (default to 100)
     * @param {Number} opts.pgNum  (default to 0)
     * @param {String} opts.dateBegin 
     * @param {String} opts.dateEnd 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ListStatisticsResponseModel} and HTTP response
     */
    listRevisionStatisticsWithHttpInfo(userId, projectId, fuzzerId, revisionId, groupBy, opts) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'userId' is set
      if (userId === undefined || userId === null) {
        throw new Error("Missing the required parameter 'userId' when calling listRevisionStatistics");
      }
      // verify the required parameter 'projectId' is set
      if (projectId === undefined || projectId === null) {
        throw new Error("Missing the required parameter 'projectId' when calling listRevisionStatistics");
      }
      // verify the required parameter 'fuzzerId' is set
      if (fuzzerId === undefined || fuzzerId === null) {
        throw new Error("Missing the required parameter 'fuzzerId' when calling listRevisionStatistics");
      }
      // verify the required parameter 'revisionId' is set
      if (revisionId === undefined || revisionId === null) {
        throw new Error("Missing the required parameter 'revisionId' when calling listRevisionStatistics");
      }
      // verify the required parameter 'groupBy' is set
      if (groupBy === undefined || groupBy === null) {
        throw new Error("Missing the required parameter 'groupBy' when calling listRevisionStatistics");
      }

      let pathParams = {
        'user_id': userId,
        'project_id': projectId,
        'fuzzer_id': fuzzerId,
        'revision_id': revisionId
      };
      let queryParams = {
        'pg_size': opts['pgSize'],
        'pg_num': opts['pgNum'],
        'group_by': groupBy,
        'date_begin': opts['dateBegin'],
        'date_end': opts['dateEnd']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ListStatisticsResponseModel;
      return this.apiClient.callApi(
        '/api/v1/users/{user_id}/projects/{project_id}/fuzzers/{fuzzer_id}/revisions/{revision_id}/statistics', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * List Revision Statistics
     * @param {String} userId 
     * @param {String} projectId 
     * @param {String} fuzzerId 
     * @param {String} revisionId 
     * @param {module:model/String} groupBy An enumeration.
     * @param {Object} opts Optional parameters
     * @param {Number} opts.pgSize  (default to 100)
     * @param {Number} opts.pgNum  (default to 0)
     * @param {String} opts.dateBegin 
     * @param {String} opts.dateEnd 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ListStatisticsResponseModel}
     */
    listRevisionStatistics(userId, projectId, fuzzerId, revisionId, groupBy, opts) {
      return this.listRevisionStatisticsWithHttpInfo(userId, projectId, fuzzerId, revisionId, groupBy, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * List Revisions
     * @param {String} fuzzerId 
     * @param {String} userId 
     * @param {String} projectId 
     * @param {Object} opts Optional parameters
     * @param {Number} opts.pgSize  (default to 100)
     * @param {Number} opts.pgNum  (default to 0)
     * @param {module:model/String} opts.removalState An enumeration.
     * @param {Array.<module:model/ORMRevisionStatus>} opts.statuses 
     * @param {Array.<module:model/ORMHealth>} opts.health 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ListRevisionsResponseModel} and HTTP response
     */
    listRevisionsWithHttpInfo(fuzzerId, userId, projectId, opts) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'fuzzerId' is set
      if (fuzzerId === undefined || fuzzerId === null) {
        throw new Error("Missing the required parameter 'fuzzerId' when calling listRevisions");
      }
      // verify the required parameter 'userId' is set
      if (userId === undefined || userId === null) {
        throw new Error("Missing the required parameter 'userId' when calling listRevisions");
      }
      // verify the required parameter 'projectId' is set
      if (projectId === undefined || projectId === null) {
        throw new Error("Missing the required parameter 'projectId' when calling listRevisions");
      }

      let pathParams = {
        'fuzzer_id': fuzzerId,
        'user_id': userId,
        'project_id': projectId
      };
      let queryParams = {
        'pg_size': opts['pgSize'],
        'pg_num': opts['pgNum'],
        'removal_state': opts['removalState'],
        'statuses': this.apiClient.buildCollectionParam(opts['statuses'], 'multi'),
        'health': this.apiClient.buildCollectionParam(opts['health'], 'multi')
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ListRevisionsResponseModel;
      return this.apiClient.callApi(
        '/api/v1/users/{user_id}/projects/{project_id}/fuzzers/{fuzzer_id}/revisions', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * List Revisions
     * @param {String} fuzzerId 
     * @param {String} userId 
     * @param {String} projectId 
     * @param {Object} opts Optional parameters
     * @param {Number} opts.pgSize  (default to 100)
     * @param {Number} opts.pgNum  (default to 0)
     * @param {module:model/String} opts.removalState An enumeration.
     * @param {Array.<module:model/ORMRevisionStatus>} opts.statuses 
     * @param {Array.<module:model/ORMHealth>} opts.health 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ListRevisionsResponseModel}
     */
    listRevisions(fuzzerId, userId, projectId, opts) {
      return this.listRevisionsWithHttpInfo(fuzzerId, userId, projectId, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * List Trashbin Fuzzers
     * @param {String} projectId 
     * @param {String} userId 
     * @param {Object} opts Optional parameters
     * @param {Number} opts.pgSize  (default to 100)
     * @param {Number} opts.pgNum  (default to 0)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ListFuzzersResponseModel} and HTTP response
     */
    listTrashbinFuzzersWithHttpInfo(projectId, userId, opts) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'projectId' is set
      if (projectId === undefined || projectId === null) {
        throw new Error("Missing the required parameter 'projectId' when calling listTrashbinFuzzers");
      }
      // verify the required parameter 'userId' is set
      if (userId === undefined || userId === null) {
        throw new Error("Missing the required parameter 'userId' when calling listTrashbinFuzzers");
      }

      let pathParams = {
        'project_id': projectId,
        'user_id': userId
      };
      let queryParams = {
        'pg_size': opts['pgSize'],
        'pg_num': opts['pgNum']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ListFuzzersResponseModel;
      return this.apiClient.callApi(
        '/api/v1/users/{user_id}/projects/{project_id}/fuzzers/trashbin', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * List Trashbin Fuzzers
     * @param {String} projectId 
     * @param {String} userId 
     * @param {Object} opts Optional parameters
     * @param {Number} opts.pgSize  (default to 100)
     * @param {Number} opts.pgNum  (default to 0)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ListFuzzersResponseModel}
     */
    listTrashbinFuzzers(projectId, userId, opts) {
      return this.listTrashbinFuzzersWithHttpInfo(projectId, userId, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Restart Fuzzer
     * @param {String} fuzzerId 
     * @param {String} userId 
     * @param {String} projectId 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Object} and HTTP response
     */
    restartFuzzerWithHttpInfo(fuzzerId, userId, projectId) {
      let postBody = null;
      // verify the required parameter 'fuzzerId' is set
      if (fuzzerId === undefined || fuzzerId === null) {
        throw new Error("Missing the required parameter 'fuzzerId' when calling restartFuzzer");
      }
      // verify the required parameter 'userId' is set
      if (userId === undefined || userId === null) {
        throw new Error("Missing the required parameter 'userId' when calling restartFuzzer");
      }
      // verify the required parameter 'projectId' is set
      if (projectId === undefined || projectId === null) {
        throw new Error("Missing the required parameter 'projectId' when calling restartFuzzer");
      }

      let pathParams = {
        'fuzzer_id': fuzzerId,
        'user_id': userId,
        'project_id': projectId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/api/v1/users/{user_id}/projects/{project_id}/fuzzers/{fuzzer_id}/actions/restart', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Restart Fuzzer
     * @param {String} fuzzerId 
     * @param {String} userId 
     * @param {String} projectId 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Object}
     */
    restartFuzzer(fuzzerId, userId, projectId) {
      return this.restartFuzzerWithHttpInfo(fuzzerId, userId, projectId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Restart Revision
     * @param {String} revisionId 
     * @param {String} userId 
     * @param {String} projectId 
     * @param {String} fuzzerId 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Object} and HTTP response
     */
    restartRevisionWithHttpInfo(revisionId, userId, projectId, fuzzerId) {
      let postBody = null;
      // verify the required parameter 'revisionId' is set
      if (revisionId === undefined || revisionId === null) {
        throw new Error("Missing the required parameter 'revisionId' when calling restartRevision");
      }
      // verify the required parameter 'userId' is set
      if (userId === undefined || userId === null) {
        throw new Error("Missing the required parameter 'userId' when calling restartRevision");
      }
      // verify the required parameter 'projectId' is set
      if (projectId === undefined || projectId === null) {
        throw new Error("Missing the required parameter 'projectId' when calling restartRevision");
      }
      // verify the required parameter 'fuzzerId' is set
      if (fuzzerId === undefined || fuzzerId === null) {
        throw new Error("Missing the required parameter 'fuzzerId' when calling restartRevision");
      }

      let pathParams = {
        'revision_id': revisionId,
        'user_id': userId,
        'project_id': projectId,
        'fuzzer_id': fuzzerId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/api/v1/users/{user_id}/projects/{project_id}/fuzzers/{fuzzer_id}/revisions/{revision_id}/actions/restart', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Restart Revision
     * @param {String} revisionId 
     * @param {String} userId 
     * @param {String} projectId 
     * @param {String} fuzzerId 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Object}
     */
    restartRevision(revisionId, userId, projectId, fuzzerId) {
      return this.restartRevisionWithHttpInfo(revisionId, userId, projectId, fuzzerId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Set Active Revision
     * Set active revision
     * @param {String} userId 
     * @param {String} projectId 
     * @param {String} fuzzerId 
     * @param {module:model/SetActiveRevisionRequestModel} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Object} and HTTP response
     */
    setActiveRevisionWithHttpInfo(userId, projectId, fuzzerId, body) {
      let postBody = body;
      // verify the required parameter 'userId' is set
      if (userId === undefined || userId === null) {
        throw new Error("Missing the required parameter 'userId' when calling setActiveRevision");
      }
      // verify the required parameter 'projectId' is set
      if (projectId === undefined || projectId === null) {
        throw new Error("Missing the required parameter 'projectId' when calling setActiveRevision");
      }
      // verify the required parameter 'fuzzerId' is set
      if (fuzzerId === undefined || fuzzerId === null) {
        throw new Error("Missing the required parameter 'fuzzerId' when calling setActiveRevision");
      }
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling setActiveRevision");
      }

      let pathParams = {
        'user_id': userId,
        'project_id': projectId,
        'fuzzer_id': fuzzerId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/api/v1/users/{user_id}/projects/{project_id}/fuzzers/{fuzzer_id}/revisions/active', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Set Active Revision
     * Set active revision
     * @param {String} userId 
     * @param {String} projectId 
     * @param {String} fuzzerId 
     * @param {module:model/SetActiveRevisionRequestModel} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Object}
     */
    setActiveRevision(userId, projectId, fuzzerId, body) {
      return this.setActiveRevisionWithHttpInfo(userId, projectId, fuzzerId, body)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Start Fuzzer
     * @param {String} fuzzerId 
     * @param {String} userId 
     * @param {String} projectId 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Object} and HTTP response
     */
    startFuzzerWithHttpInfo(fuzzerId, userId, projectId) {
      let postBody = null;
      // verify the required parameter 'fuzzerId' is set
      if (fuzzerId === undefined || fuzzerId === null) {
        throw new Error("Missing the required parameter 'fuzzerId' when calling startFuzzer");
      }
      // verify the required parameter 'userId' is set
      if (userId === undefined || userId === null) {
        throw new Error("Missing the required parameter 'userId' when calling startFuzzer");
      }
      // verify the required parameter 'projectId' is set
      if (projectId === undefined || projectId === null) {
        throw new Error("Missing the required parameter 'projectId' when calling startFuzzer");
      }

      let pathParams = {
        'fuzzer_id': fuzzerId,
        'user_id': userId,
        'project_id': projectId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/api/v1/users/{user_id}/projects/{project_id}/fuzzers/{fuzzer_id}/actions/start', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Start Fuzzer
     * @param {String} fuzzerId 
     * @param {String} userId 
     * @param {String} projectId 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Object}
     */
    startFuzzer(fuzzerId, userId, projectId) {
      return this.startFuzzerWithHttpInfo(fuzzerId, userId, projectId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Start Revision
     * @param {String} revisionId 
     * @param {String} userId 
     * @param {String} projectId 
     * @param {String} fuzzerId 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Object} and HTTP response
     */
    startRevisionWithHttpInfo(revisionId, userId, projectId, fuzzerId) {
      let postBody = null;
      // verify the required parameter 'revisionId' is set
      if (revisionId === undefined || revisionId === null) {
        throw new Error("Missing the required parameter 'revisionId' when calling startRevision");
      }
      // verify the required parameter 'userId' is set
      if (userId === undefined || userId === null) {
        throw new Error("Missing the required parameter 'userId' when calling startRevision");
      }
      // verify the required parameter 'projectId' is set
      if (projectId === undefined || projectId === null) {
        throw new Error("Missing the required parameter 'projectId' when calling startRevision");
      }
      // verify the required parameter 'fuzzerId' is set
      if (fuzzerId === undefined || fuzzerId === null) {
        throw new Error("Missing the required parameter 'fuzzerId' when calling startRevision");
      }

      let pathParams = {
        'revision_id': revisionId,
        'user_id': userId,
        'project_id': projectId,
        'fuzzer_id': fuzzerId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/api/v1/users/{user_id}/projects/{project_id}/fuzzers/{fuzzer_id}/revisions/{revision_id}/actions/start', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Start Revision
     * @param {String} revisionId 
     * @param {String} userId 
     * @param {String} projectId 
     * @param {String} fuzzerId 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Object}
     */
    startRevision(revisionId, userId, projectId, fuzzerId) {
      return this.startRevisionWithHttpInfo(revisionId, userId, projectId, fuzzerId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Stop Fuzzer
     * @param {String} fuzzerId 
     * @param {String} userId 
     * @param {String} projectId 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Object} and HTTP response
     */
    stopFuzzerWithHttpInfo(fuzzerId, userId, projectId) {
      let postBody = null;
      // verify the required parameter 'fuzzerId' is set
      if (fuzzerId === undefined || fuzzerId === null) {
        throw new Error("Missing the required parameter 'fuzzerId' when calling stopFuzzer");
      }
      // verify the required parameter 'userId' is set
      if (userId === undefined || userId === null) {
        throw new Error("Missing the required parameter 'userId' when calling stopFuzzer");
      }
      // verify the required parameter 'projectId' is set
      if (projectId === undefined || projectId === null) {
        throw new Error("Missing the required parameter 'projectId' when calling stopFuzzer");
      }

      let pathParams = {
        'fuzzer_id': fuzzerId,
        'user_id': userId,
        'project_id': projectId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/api/v1/users/{user_id}/projects/{project_id}/fuzzers/{fuzzer_id}/actions/stop', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Stop Fuzzer
     * @param {String} fuzzerId 
     * @param {String} userId 
     * @param {String} projectId 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Object}
     */
    stopFuzzer(fuzzerId, userId, projectId) {
      return this.stopFuzzerWithHttpInfo(fuzzerId, userId, projectId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Stop Revision
     * @param {String} revisionId 
     * @param {String} userId 
     * @param {String} projectId 
     * @param {String} fuzzerId 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Object} and HTTP response
     */
    stopRevisionWithHttpInfo(revisionId, userId, projectId, fuzzerId) {
      let postBody = null;
      // verify the required parameter 'revisionId' is set
      if (revisionId === undefined || revisionId === null) {
        throw new Error("Missing the required parameter 'revisionId' when calling stopRevision");
      }
      // verify the required parameter 'userId' is set
      if (userId === undefined || userId === null) {
        throw new Error("Missing the required parameter 'userId' when calling stopRevision");
      }
      // verify the required parameter 'projectId' is set
      if (projectId === undefined || projectId === null) {
        throw new Error("Missing the required parameter 'projectId' when calling stopRevision");
      }
      // verify the required parameter 'fuzzerId' is set
      if (fuzzerId === undefined || fuzzerId === null) {
        throw new Error("Missing the required parameter 'fuzzerId' when calling stopRevision");
      }

      let pathParams = {
        'revision_id': revisionId,
        'user_id': userId,
        'project_id': projectId,
        'fuzzer_id': fuzzerId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/api/v1/users/{user_id}/projects/{project_id}/fuzzers/{fuzzer_id}/revisions/{revision_id}/actions/stop', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Stop Revision
     * @param {String} revisionId 
     * @param {String} userId 
     * @param {String} projectId 
     * @param {String} fuzzerId 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Object}
     */
    stopRevision(revisionId, userId, projectId, fuzzerId) {
      return this.stopRevisionWithHttpInfo(revisionId, userId, projectId, fuzzerId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Update Bug Tracker Integration
     * @param {String} integrationId 
     * @param {String} projectId 
     * @param {String} userId 
     * @param {module:model/UpdateIntegrationRequestModel} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Object} and HTTP response
     */
    updateBugTrackerIntegrationWithHttpInfo(integrationId, projectId, userId, body) {
      let postBody = body;
      // verify the required parameter 'integrationId' is set
      if (integrationId === undefined || integrationId === null) {
        throw new Error("Missing the required parameter 'integrationId' when calling updateBugTrackerIntegration");
      }
      // verify the required parameter 'projectId' is set
      if (projectId === undefined || projectId === null) {
        throw new Error("Missing the required parameter 'projectId' when calling updateBugTrackerIntegration");
      }
      // verify the required parameter 'userId' is set
      if (userId === undefined || userId === null) {
        throw new Error("Missing the required parameter 'userId' when calling updateBugTrackerIntegration");
      }
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling updateBugTrackerIntegration");
      }

      let pathParams = {
        'integration_id': integrationId,
        'project_id': projectId,
        'user_id': userId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/api/v1/users/{user_id}/projects/{project_id}/integrations/{integration_id}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Update Bug Tracker Integration
     * @param {String} integrationId 
     * @param {String} projectId 
     * @param {String} userId 
     * @param {module:model/UpdateIntegrationRequestModel} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Object}
     */
    updateBugTrackerIntegration(integrationId, projectId, userId, body) {
      return this.updateBugTrackerIntegrationWithHttpInfo(integrationId, projectId, userId, body)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Update Bug Tracker Integration Config
     * @param {String} integrationId 
     * @param {String} projectId 
     * @param {String} userId 
     * @param {module:model/UpdateIntegrationConfigRequestModel} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Object} and HTTP response
     */
    updateBugTrackerIntegrationConfigWithHttpInfo(integrationId, projectId, userId, body) {
      let postBody = body;
      // verify the required parameter 'integrationId' is set
      if (integrationId === undefined || integrationId === null) {
        throw new Error("Missing the required parameter 'integrationId' when calling updateBugTrackerIntegrationConfig");
      }
      // verify the required parameter 'projectId' is set
      if (projectId === undefined || projectId === null) {
        throw new Error("Missing the required parameter 'projectId' when calling updateBugTrackerIntegrationConfig");
      }
      // verify the required parameter 'userId' is set
      if (userId === undefined || userId === null) {
        throw new Error("Missing the required parameter 'userId' when calling updateBugTrackerIntegrationConfig");
      }
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling updateBugTrackerIntegrationConfig");
      }

      let pathParams = {
        'integration_id': integrationId,
        'project_id': projectId,
        'user_id': userId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/api/v1/users/{user_id}/projects/{project_id}/integrations/{integration_id}/config', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Update Bug Tracker Integration Config
     * @param {String} integrationId 
     * @param {String} projectId 
     * @param {String} userId 
     * @param {module:model/UpdateIntegrationConfigRequestModel} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Object}
     */
    updateBugTrackerIntegrationConfig(integrationId, projectId, userId, body) {
      return this.updateBugTrackerIntegrationConfigWithHttpInfo(integrationId, projectId, userId, body)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Update Fuzzer
     * @param {String} projectId 
     * @param {String} fuzzerId 
     * @param {String} userId 
     * @param {module:model/UpdateFuzzerRequestModel} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Object} and HTTP response
     */
    updateFuzzerWithHttpInfo(projectId, fuzzerId, userId, body) {
      let postBody = body;
      // verify the required parameter 'projectId' is set
      if (projectId === undefined || projectId === null) {
        throw new Error("Missing the required parameter 'projectId' when calling updateFuzzer");
      }
      // verify the required parameter 'fuzzerId' is set
      if (fuzzerId === undefined || fuzzerId === null) {
        throw new Error("Missing the required parameter 'fuzzerId' when calling updateFuzzer");
      }
      // verify the required parameter 'userId' is set
      if (userId === undefined || userId === null) {
        throw new Error("Missing the required parameter 'userId' when calling updateFuzzer");
      }
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling updateFuzzer");
      }

      let pathParams = {
        'project_id': projectId,
        'fuzzer_id': fuzzerId,
        'user_id': userId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/api/v1/users/{user_id}/projects/{project_id}/fuzzers/{fuzzer_id}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Update Fuzzer
     * @param {String} projectId 
     * @param {String} fuzzerId 
     * @param {String} userId 
     * @param {module:model/UpdateFuzzerRequestModel} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Object}
     */
    updateFuzzer(projectId, fuzzerId, userId, body) {
      return this.updateFuzzerWithHttpInfo(projectId, fuzzerId, userId, body)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Update Pool
     * @param {String} userId 
     * @param {String} poolId 
     * @param {module:model/UpdatePoolInfoRequestModel} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Object} and HTTP response
     */
    updatePoolWithHttpInfo(userId, poolId, body) {
      let postBody = body;
      // verify the required parameter 'userId' is set
      if (userId === undefined || userId === null) {
        throw new Error("Missing the required parameter 'userId' when calling updatePool");
      }
      // verify the required parameter 'poolId' is set
      if (poolId === undefined || poolId === null) {
        throw new Error("Missing the required parameter 'poolId' when calling updatePool");
      }
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling updatePool");
      }

      let pathParams = {
        'user_id': userId,
        'pool_id': poolId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/api/v1/users/{user_id}/pools/{pool_id}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Update Pool
     * @param {String} userId 
     * @param {String} poolId 
     * @param {module:model/UpdatePoolInfoRequestModel} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Object}
     */
    updatePool(userId, poolId, body) {
      return this.updatePoolWithHttpInfo(userId, poolId, body)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Update Project
     * @param {String} projectId 
     * @param {String} userId 
     * @param {module:model/UpdateProjectRequestModel} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Object} and HTTP response
     */
    updateProjectWithHttpInfo(projectId, userId, body) {
      let postBody = body;
      // verify the required parameter 'projectId' is set
      if (projectId === undefined || projectId === null) {
        throw new Error("Missing the required parameter 'projectId' when calling updateProject");
      }
      // verify the required parameter 'userId' is set
      if (userId === undefined || userId === null) {
        throw new Error("Missing the required parameter 'userId' when calling updateProject");
      }
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling updateProject");
      }

      let pathParams = {
        'project_id': projectId,
        'user_id': userId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/api/v1/users/{user_id}/projects/{project_id}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Update Project
     * @param {String} projectId 
     * @param {String} userId 
     * @param {module:model/UpdateProjectRequestModel} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Object}
     */
    updateProject(projectId, userId, body) {
      return this.updateProjectWithHttpInfo(projectId, userId, body)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Update Revision Information
     * @param {String} revisionId 
     * @param {String} fuzzerId 
     * @param {String} userId 
     * @param {String} projectId 
     * @param {module:model/UpdateRevisionInfoRequestModel} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Object} and HTTP response
     */
    updateRevisionInformationWithHttpInfo(revisionId, fuzzerId, userId, projectId, body) {
      let postBody = body;
      // verify the required parameter 'revisionId' is set
      if (revisionId === undefined || revisionId === null) {
        throw new Error("Missing the required parameter 'revisionId' when calling updateRevisionInformation");
      }
      // verify the required parameter 'fuzzerId' is set
      if (fuzzerId === undefined || fuzzerId === null) {
        throw new Error("Missing the required parameter 'fuzzerId' when calling updateRevisionInformation");
      }
      // verify the required parameter 'userId' is set
      if (userId === undefined || userId === null) {
        throw new Error("Missing the required parameter 'userId' when calling updateRevisionInformation");
      }
      // verify the required parameter 'projectId' is set
      if (projectId === undefined || projectId === null) {
        throw new Error("Missing the required parameter 'projectId' when calling updateRevisionInformation");
      }
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling updateRevisionInformation");
      }

      let pathParams = {
        'revision_id': revisionId,
        'fuzzer_id': fuzzerId,
        'user_id': userId,
        'project_id': projectId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/api/v1/users/{user_id}/projects/{project_id}/fuzzers/{fuzzer_id}/revisions/{revision_id}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Update Revision Information
     * @param {String} revisionId 
     * @param {String} fuzzerId 
     * @param {String} userId 
     * @param {String} projectId 
     * @param {module:model/UpdateRevisionInfoRequestModel} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Object}
     */
    updateRevisionInformation(revisionId, fuzzerId, userId, projectId, body) {
      return this.updateRevisionInformationWithHttpInfo(revisionId, fuzzerId, userId, projectId, body)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Update Revision Resources
     * @param {String} fuzzerId 
     * @param {String} revisionId 
     * @param {String} userId 
     * @param {String} projectId 
     * @param {module:model/UpdateRevisionResourcesRequestModel} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Object} and HTTP response
     */
    updateRevisionResourcesWithHttpInfo(fuzzerId, revisionId, userId, projectId, body) {
      let postBody = body;
      // verify the required parameter 'fuzzerId' is set
      if (fuzzerId === undefined || fuzzerId === null) {
        throw new Error("Missing the required parameter 'fuzzerId' when calling updateRevisionResources");
      }
      // verify the required parameter 'revisionId' is set
      if (revisionId === undefined || revisionId === null) {
        throw new Error("Missing the required parameter 'revisionId' when calling updateRevisionResources");
      }
      // verify the required parameter 'userId' is set
      if (userId === undefined || userId === null) {
        throw new Error("Missing the required parameter 'userId' when calling updateRevisionResources");
      }
      // verify the required parameter 'projectId' is set
      if (projectId === undefined || projectId === null) {
        throw new Error("Missing the required parameter 'projectId' when calling updateRevisionResources");
      }
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling updateRevisionResources");
      }

      let pathParams = {
        'fuzzer_id': fuzzerId,
        'revision_id': revisionId,
        'user_id': userId,
        'project_id': projectId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/api/v1/users/{user_id}/projects/{project_id}/fuzzers/{fuzzer_id}/revisions/{revision_id}/resources', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Update Revision Resources
     * @param {String} fuzzerId 
     * @param {String} revisionId 
     * @param {String} userId 
     * @param {String} projectId 
     * @param {module:model/UpdateRevisionResourcesRequestModel} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Object}
     */
    updateRevisionResources(fuzzerId, revisionId, userId, projectId, body) {
      return this.updateRevisionResourcesWithHttpInfo(fuzzerId, revisionId, userId, projectId, body)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Update Self User
     * @param {module:model/UpdateUserRequestModel} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Object} and HTTP response
     */
    updateSelfUserWithHttpInfo(body) {
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling updateSelfUser");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/api/v1/users/self', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Update Self User
     * @param {module:model/UpdateUserRequestModel} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Object}
     */
    updateSelfUser(body) {
      return this.updateSelfUserWithHttpInfo(body)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Upload Revision Binaries
     * @param {String} revisionId 
     * @param {String} userId 
     * @param {String} projectId 
     * @param {String} fuzzerId 
     * @param {File} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Object} and HTTP response
     */
    uploadRevisionBinariesWithHttpInfo(revisionId, userId, projectId, fuzzerId, body) {
      let postBody = body;
      // verify the required parameter 'revisionId' is set
      if (revisionId === undefined || revisionId === null) {
        throw new Error("Missing the required parameter 'revisionId' when calling uploadRevisionBinaries");
      }
      // verify the required parameter 'userId' is set
      if (userId === undefined || userId === null) {
        throw new Error("Missing the required parameter 'userId' when calling uploadRevisionBinaries");
      }
      // verify the required parameter 'projectId' is set
      if (projectId === undefined || projectId === null) {
        throw new Error("Missing the required parameter 'projectId' when calling uploadRevisionBinaries");
      }
      // verify the required parameter 'fuzzerId' is set
      if (fuzzerId === undefined || fuzzerId === null) {
        throw new Error("Missing the required parameter 'fuzzerId' when calling uploadRevisionBinaries");
      }
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling uploadRevisionBinaries");
      }

      let pathParams = {
        'revision_id': revisionId,
        'user_id': userId,
        'project_id': projectId,
        'fuzzer_id': fuzzerId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/octet-stream'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/api/v1/users/{user_id}/projects/{project_id}/fuzzers/{fuzzer_id}/revisions/{revision_id}/files/binaries', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Upload Revision Binaries
     * @param {String} revisionId 
     * @param {String} userId 
     * @param {String} projectId 
     * @param {String} fuzzerId 
     * @param {File} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Object}
     */
    uploadRevisionBinaries(revisionId, userId, projectId, fuzzerId, body) {
      return this.uploadRevisionBinariesWithHttpInfo(revisionId, userId, projectId, fuzzerId, body)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Upload Revision Config
     * @param {String} revisionId 
     * @param {String} userId 
     * @param {String} projectId 
     * @param {String} fuzzerId 
     * @param {File} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Object} and HTTP response
     */
    uploadRevisionConfigWithHttpInfo(revisionId, userId, projectId, fuzzerId, body) {
      let postBody = body;
      // verify the required parameter 'revisionId' is set
      if (revisionId === undefined || revisionId === null) {
        throw new Error("Missing the required parameter 'revisionId' when calling uploadRevisionConfig");
      }
      // verify the required parameter 'userId' is set
      if (userId === undefined || userId === null) {
        throw new Error("Missing the required parameter 'userId' when calling uploadRevisionConfig");
      }
      // verify the required parameter 'projectId' is set
      if (projectId === undefined || projectId === null) {
        throw new Error("Missing the required parameter 'projectId' when calling uploadRevisionConfig");
      }
      // verify the required parameter 'fuzzerId' is set
      if (fuzzerId === undefined || fuzzerId === null) {
        throw new Error("Missing the required parameter 'fuzzerId' when calling uploadRevisionConfig");
      }
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling uploadRevisionConfig");
      }

      let pathParams = {
        'revision_id': revisionId,
        'user_id': userId,
        'project_id': projectId,
        'fuzzer_id': fuzzerId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/octet-stream'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/api/v1/users/{user_id}/projects/{project_id}/fuzzers/{fuzzer_id}/revisions/{revision_id}/files/config', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Upload Revision Config
     * @param {String} revisionId 
     * @param {String} userId 
     * @param {String} projectId 
     * @param {String} fuzzerId 
     * @param {File} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Object}
     */
    uploadRevisionConfig(revisionId, userId, projectId, fuzzerId, body) {
      return this.uploadRevisionConfigWithHttpInfo(revisionId, userId, projectId, fuzzerId, body)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Upload Revision Seeds
     * @param {String} revisionId 
     * @param {String} userId 
     * @param {String} projectId 
     * @param {String} fuzzerId 
     * @param {File} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Object} and HTTP response
     */
    uploadRevisionSeedsWithHttpInfo(revisionId, userId, projectId, fuzzerId, body) {
      let postBody = body;
      // verify the required parameter 'revisionId' is set
      if (revisionId === undefined || revisionId === null) {
        throw new Error("Missing the required parameter 'revisionId' when calling uploadRevisionSeeds");
      }
      // verify the required parameter 'userId' is set
      if (userId === undefined || userId === null) {
        throw new Error("Missing the required parameter 'userId' when calling uploadRevisionSeeds");
      }
      // verify the required parameter 'projectId' is set
      if (projectId === undefined || projectId === null) {
        throw new Error("Missing the required parameter 'projectId' when calling uploadRevisionSeeds");
      }
      // verify the required parameter 'fuzzerId' is set
      if (fuzzerId === undefined || fuzzerId === null) {
        throw new Error("Missing the required parameter 'fuzzerId' when calling uploadRevisionSeeds");
      }
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling uploadRevisionSeeds");
      }

      let pathParams = {
        'revision_id': revisionId,
        'user_id': userId,
        'project_id': projectId,
        'fuzzer_id': fuzzerId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/octet-stream'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/api/v1/users/{user_id}/projects/{project_id}/fuzzers/{fuzzer_id}/revisions/{revision_id}/files/seeds', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Upload Revision Seeds
     * @param {String} revisionId 
     * @param {String} userId 
     * @param {String} projectId 
     * @param {String} fuzzerId 
     * @param {File} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Object}
     */
    uploadRevisionSeeds(revisionId, userId, projectId, fuzzerId, body) {
      return this.uploadRevisionSeedsWithHttpInfo(revisionId, userId, projectId, fuzzerId, body)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


}
