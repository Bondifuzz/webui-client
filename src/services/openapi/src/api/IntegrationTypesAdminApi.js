/**
 * FastAPI
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import CreateIntegrationTypeRequestModel from '../model/CreateIntegrationTypeRequestModel';
import ErrorModel from '../model/ErrorModel';
import HTTPValidationError from '../model/HTTPValidationError';
import IntegrationTypeResponseModel from '../model/IntegrationTypeResponseModel';
import ListIntegrationTypesResponseModel from '../model/ListIntegrationTypesResponseModel';
import UpdateIntegrationTypeRequestModel from '../model/UpdateIntegrationTypeRequestModel';

/**
* IntegrationTypesAdmin service.
* @module api/IntegrationTypesAdminApi
* @version 0.1.0
*/
export default class IntegrationTypesAdminApi {

    /**
    * Constructs a new IntegrationTypesAdminApi. 
    * @alias module:api/IntegrationTypesAdminApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }



    /**
     * Create Integration Type
     * @param {module:model/CreateIntegrationTypeRequestModel} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/IntegrationTypeResponseModel} and HTTP response
     */
    createIntegrationTypeWithHttpInfo(body) {
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling createIntegrationType");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = IntegrationTypeResponseModel;
      return this.apiClient.callApi(
        '/api/v1/admin/integration_types', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Create Integration Type
     * @param {module:model/CreateIntegrationTypeRequestModel} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/IntegrationTypeResponseModel}
     */
    createIntegrationType(body) {
      return this.createIntegrationTypeWithHttpInfo(body)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Delete Integration Type
     * @param {module:model/String} integrationTypeId An enumeration.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Object} and HTTP response
     */
    deleteIntegrationTypeWithHttpInfo(integrationTypeId) {
      let postBody = null;
      // verify the required parameter 'integrationTypeId' is set
      if (integrationTypeId === undefined || integrationTypeId === null) {
        throw new Error("Missing the required parameter 'integrationTypeId' when calling deleteIntegrationType");
      }

      let pathParams = {
        'integration_type_id': integrationTypeId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/api/v1/admin/integration_types/{integration_type_id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Delete Integration Type
     * @param {module:model/String} integrationTypeId An enumeration.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Object}
     */
    deleteIntegrationType(integrationTypeId) {
      return this.deleteIntegrationTypeWithHttpInfo(integrationTypeId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get Integration Type
     * @param {module:model/String} integrationTypeId An enumeration.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/IntegrationTypeResponseModel} and HTTP response
     */
    getIntegrationTypeWithHttpInfo(integrationTypeId) {
      let postBody = null;
      // verify the required parameter 'integrationTypeId' is set
      if (integrationTypeId === undefined || integrationTypeId === null) {
        throw new Error("Missing the required parameter 'integrationTypeId' when calling getIntegrationType");
      }

      let pathParams = {
        'integration_type_id': integrationTypeId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = IntegrationTypeResponseModel;
      return this.apiClient.callApi(
        '/api/v1/admin/integration_types/{integration_type_id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Get Integration Type
     * @param {module:model/String} integrationTypeId An enumeration.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/IntegrationTypeResponseModel}
     */
    getIntegrationType(integrationTypeId) {
      return this.getIntegrationTypeWithHttpInfo(integrationTypeId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * List Integration Types
     * @param {Object} opts Optional parameters
     * @param {Number} opts.pgSize  (default to 100)
     * @param {Number} opts.pgNum  (default to 0)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ListIntegrationTypesResponseModel} and HTTP response
     */
    listIntegrationTypesWithHttpInfo(opts) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'pg_size': opts['pgSize'],
        'pg_num': opts['pgNum']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ListIntegrationTypesResponseModel;
      return this.apiClient.callApi(
        '/api/v1/admin/integration_types', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * List Integration Types
     * @param {Object} opts Optional parameters
     * @param {Number} opts.pgSize  (default to 100)
     * @param {Number} opts.pgNum  (default to 0)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ListIntegrationTypesResponseModel}
     */
    listIntegrationTypes(opts) {
      return this.listIntegrationTypesWithHttpInfo(opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Update Integration Type
     * @param {module:model/String} integrationTypeId An enumeration.
     * @param {module:model/UpdateIntegrationTypeRequestModel} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Object} and HTTP response
     */
    updateIntegrationTypeWithHttpInfo(integrationTypeId, body) {
      let postBody = body;
      // verify the required parameter 'integrationTypeId' is set
      if (integrationTypeId === undefined || integrationTypeId === null) {
        throw new Error("Missing the required parameter 'integrationTypeId' when calling updateIntegrationType");
      }
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling updateIntegrationType");
      }

      let pathParams = {
        'integration_type_id': integrationTypeId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/api/v1/admin/integration_types/{integration_type_id}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Update Integration Type
     * @param {module:model/String} integrationTypeId An enumeration.
     * @param {module:model/UpdateIntegrationTypeRequestModel} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Object}
     */
    updateIntegrationType(integrationTypeId, body) {
      return this.updateIntegrationTypeWithHttpInfo(integrationTypeId, body)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


}
