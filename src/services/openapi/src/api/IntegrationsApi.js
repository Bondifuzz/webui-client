/**
 * FastAPI
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import CreateIntegrationRequestModel from '../model/CreateIntegrationRequestModel';
import ErrorModel from '../model/ErrorModel';
import HTTPValidationError from '../model/HTTPValidationError';
import IntegrationResponseModel from '../model/IntegrationResponseModel';
import ItemCountResponseModel from '../model/ItemCountResponseModel';
import ListIntegrationsResponseModel from '../model/ListIntegrationsResponseModel';
import ORMIntegrationStatus from '../model/ORMIntegrationStatus';
import ORMIntegrationTypeID from '../model/ORMIntegrationTypeID';
import UpdateIntegrationConfigRequestModel from '../model/UpdateIntegrationConfigRequestModel';
import UpdateIntegrationRequestModel from '../model/UpdateIntegrationRequestModel';

/**
* Integrations service.
* @module api/IntegrationsApi
* @version 0.1.0
*/
export default class IntegrationsApi {

    /**
    * Constructs a new IntegrationsApi. 
    * @alias module:api/IntegrationsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }



    /**
     * Create Bug Tracker Integration
     * @param {String} projectId 
     * @param {String} userId 
     * @param {module:model/CreateIntegrationRequestModel} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/IntegrationResponseModel} and HTTP response
     */
    createBugTrackerIntegrationWithHttpInfo(projectId, userId, body) {
      let postBody = body;
      // verify the required parameter 'projectId' is set
      if (projectId === undefined || projectId === null) {
        throw new Error("Missing the required parameter 'projectId' when calling createBugTrackerIntegration");
      }
      // verify the required parameter 'userId' is set
      if (userId === undefined || userId === null) {
        throw new Error("Missing the required parameter 'userId' when calling createBugTrackerIntegration");
      }
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling createBugTrackerIntegration");
      }

      let pathParams = {
        'project_id': projectId,
        'user_id': userId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = IntegrationResponseModel;
      return this.apiClient.callApi(
        '/api/v1/users/{user_id}/projects/{project_id}/integrations', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Create Bug Tracker Integration
     * @param {String} projectId 
     * @param {String} userId 
     * @param {module:model/CreateIntegrationRequestModel} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/IntegrationResponseModel}
     */
    createBugTrackerIntegration(projectId, userId, body) {
      return this.createBugTrackerIntegrationWithHttpInfo(projectId, userId, body)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Delete Integration
     * @param {String} integrationId 
     * @param {String} projectId 
     * @param {String} userId 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Object} and HTTP response
     */
    deleteIntegrationWithHttpInfo(integrationId, projectId, userId) {
      let postBody = null;
      // verify the required parameter 'integrationId' is set
      if (integrationId === undefined || integrationId === null) {
        throw new Error("Missing the required parameter 'integrationId' when calling deleteIntegration");
      }
      // verify the required parameter 'projectId' is set
      if (projectId === undefined || projectId === null) {
        throw new Error("Missing the required parameter 'projectId' when calling deleteIntegration");
      }
      // verify the required parameter 'userId' is set
      if (userId === undefined || userId === null) {
        throw new Error("Missing the required parameter 'userId' when calling deleteIntegration");
      }

      let pathParams = {
        'integration_id': integrationId,
        'project_id': projectId,
        'user_id': userId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/api/v1/users/{user_id}/projects/{project_id}/integrations/{integration_id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Delete Integration
     * @param {String} integrationId 
     * @param {String} projectId 
     * @param {String} userId 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Object}
     */
    deleteIntegration(integrationId, projectId, userId) {
      return this.deleteIntegrationWithHttpInfo(integrationId, projectId, userId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get Bug Tracker Integration
     * @param {String} integrationId 
     * @param {String} projectId 
     * @param {String} userId 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/IntegrationResponseModel} and HTTP response
     */
    getBugTrackerIntegrationWithHttpInfo(integrationId, projectId, userId) {
      let postBody = null;
      // verify the required parameter 'integrationId' is set
      if (integrationId === undefined || integrationId === null) {
        throw new Error("Missing the required parameter 'integrationId' when calling getBugTrackerIntegration");
      }
      // verify the required parameter 'projectId' is set
      if (projectId === undefined || projectId === null) {
        throw new Error("Missing the required parameter 'projectId' when calling getBugTrackerIntegration");
      }
      // verify the required parameter 'userId' is set
      if (userId === undefined || userId === null) {
        throw new Error("Missing the required parameter 'userId' when calling getBugTrackerIntegration");
      }

      let pathParams = {
        'integration_id': integrationId,
        'project_id': projectId,
        'user_id': userId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = IntegrationResponseModel;
      return this.apiClient.callApi(
        '/api/v1/users/{user_id}/projects/{project_id}/integrations/{integration_id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Get Bug Tracker Integration
     * @param {String} integrationId 
     * @param {String} projectId 
     * @param {String} userId 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/IntegrationResponseModel}
     */
    getBugTrackerIntegration(integrationId, projectId, userId) {
      return this.getBugTrackerIntegrationWithHttpInfo(integrationId, projectId, userId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get Bug Tracker Integration By Name
     * @param {String} projectId 
     * @param {String} userId 
     * @param {String} name 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/IntegrationResponseModel} and HTTP response
     */
    getBugTrackerIntegrationByNameWithHttpInfo(projectId, userId, name) {
      let postBody = null;
      // verify the required parameter 'projectId' is set
      if (projectId === undefined || projectId === null) {
        throw new Error("Missing the required parameter 'projectId' when calling getBugTrackerIntegrationByName");
      }
      // verify the required parameter 'userId' is set
      if (userId === undefined || userId === null) {
        throw new Error("Missing the required parameter 'userId' when calling getBugTrackerIntegrationByName");
      }
      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling getBugTrackerIntegrationByName");
      }

      let pathParams = {
        'project_id': projectId,
        'user_id': userId
      };
      let queryParams = {
        'name': name
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = IntegrationResponseModel;
      return this.apiClient.callApi(
        '/api/v1/users/{user_id}/projects/{project_id}/integrations/lookup', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Get Bug Tracker Integration By Name
     * @param {String} projectId 
     * @param {String} userId 
     * @param {String} name 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/IntegrationResponseModel}
     */
    getBugTrackerIntegrationByName(projectId, userId, name) {
      return this.getBugTrackerIntegrationByNameWithHttpInfo(projectId, userId, name)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get Bug Tracker Integration Config
     * @param {String} integrationId 
     * @param {String} projectId 
     * @param {String} userId 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Object} and HTTP response
     */
    getBugTrackerIntegrationConfigWithHttpInfo(integrationId, projectId, userId) {
      let postBody = null;
      // verify the required parameter 'integrationId' is set
      if (integrationId === undefined || integrationId === null) {
        throw new Error("Missing the required parameter 'integrationId' when calling getBugTrackerIntegrationConfig");
      }
      // verify the required parameter 'projectId' is set
      if (projectId === undefined || projectId === null) {
        throw new Error("Missing the required parameter 'projectId' when calling getBugTrackerIntegrationConfig");
      }
      // verify the required parameter 'userId' is set
      if (userId === undefined || userId === null) {
        throw new Error("Missing the required parameter 'userId' when calling getBugTrackerIntegrationConfig");
      }

      let pathParams = {
        'integration_id': integrationId,
        'project_id': projectId,
        'user_id': userId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/api/v1/users/{user_id}/projects/{project_id}/integrations/{integration_id}/config', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Get Bug Tracker Integration Config
     * @param {String} integrationId 
     * @param {String} projectId 
     * @param {String} userId 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Object}
     */
    getBugTrackerIntegrationConfig(integrationId, projectId, userId) {
      return this.getBugTrackerIntegrationConfigWithHttpInfo(integrationId, projectId, userId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get Count Of Bug Tracker Integrations
     * @param {String} projectId 
     * @param {String} userId 
     * @param {Object} opts Optional parameters
     * @param {Number} opts.pgSize  (default to 100)
     * @param {Array.<module:model/ORMIntegrationTypeID>} opts.types 
     * @param {Array.<module:model/ORMIntegrationStatus>} opts.statuses 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ItemCountResponseModel} and HTTP response
     */
    getCountOfBugTrackerIntegrationsWithHttpInfo(projectId, userId, opts) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'projectId' is set
      if (projectId === undefined || projectId === null) {
        throw new Error("Missing the required parameter 'projectId' when calling getCountOfBugTrackerIntegrations");
      }
      // verify the required parameter 'userId' is set
      if (userId === undefined || userId === null) {
        throw new Error("Missing the required parameter 'userId' when calling getCountOfBugTrackerIntegrations");
      }

      let pathParams = {
        'project_id': projectId,
        'user_id': userId
      };
      let queryParams = {
        'pg_size': opts['pgSize'],
        'types': this.apiClient.buildCollectionParam(opts['types'], 'multi'),
        'statuses': this.apiClient.buildCollectionParam(opts['statuses'], 'multi')
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ItemCountResponseModel;
      return this.apiClient.callApi(
        '/api/v1/users/{user_id}/projects/{project_id}/integrations/count', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Get Count Of Bug Tracker Integrations
     * @param {String} projectId 
     * @param {String} userId 
     * @param {Object} opts Optional parameters
     * @param {Number} opts.pgSize  (default to 100)
     * @param {Array.<module:model/ORMIntegrationTypeID>} opts.types 
     * @param {Array.<module:model/ORMIntegrationStatus>} opts.statuses 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ItemCountResponseModel}
     */
    getCountOfBugTrackerIntegrations(projectId, userId, opts) {
      return this.getCountOfBugTrackerIntegrationsWithHttpInfo(projectId, userId, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * List Integrations
     * @param {String} projectId 
     * @param {String} userId 
     * @param {Object} opts Optional parameters
     * @param {Number} opts.pgSize  (default to 100)
     * @param {Number} opts.pgNum  (default to 0)
     * @param {Array.<module:model/ORMIntegrationTypeID>} opts.types 
     * @param {Array.<module:model/ORMIntegrationStatus>} opts.statuses 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ListIntegrationsResponseModel} and HTTP response
     */
    listIntegrationsWithHttpInfo(projectId, userId, opts) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'projectId' is set
      if (projectId === undefined || projectId === null) {
        throw new Error("Missing the required parameter 'projectId' when calling listIntegrations");
      }
      // verify the required parameter 'userId' is set
      if (userId === undefined || userId === null) {
        throw new Error("Missing the required parameter 'userId' when calling listIntegrations");
      }

      let pathParams = {
        'project_id': projectId,
        'user_id': userId
      };
      let queryParams = {
        'pg_size': opts['pgSize'],
        'pg_num': opts['pgNum'],
        'types': this.apiClient.buildCollectionParam(opts['types'], 'multi'),
        'statuses': this.apiClient.buildCollectionParam(opts['statuses'], 'multi')
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ListIntegrationsResponseModel;
      return this.apiClient.callApi(
        '/api/v1/users/{user_id}/projects/{project_id}/integrations', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * List Integrations
     * @param {String} projectId 
     * @param {String} userId 
     * @param {Object} opts Optional parameters
     * @param {Number} opts.pgSize  (default to 100)
     * @param {Number} opts.pgNum  (default to 0)
     * @param {Array.<module:model/ORMIntegrationTypeID>} opts.types 
     * @param {Array.<module:model/ORMIntegrationStatus>} opts.statuses 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ListIntegrationsResponseModel}
     */
    listIntegrations(projectId, userId, opts) {
      return this.listIntegrationsWithHttpInfo(projectId, userId, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Update Bug Tracker Integration
     * @param {String} integrationId 
     * @param {String} projectId 
     * @param {String} userId 
     * @param {module:model/UpdateIntegrationRequestModel} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Object} and HTTP response
     */
    updateBugTrackerIntegrationWithHttpInfo(integrationId, projectId, userId, body) {
      let postBody = body;
      // verify the required parameter 'integrationId' is set
      if (integrationId === undefined || integrationId === null) {
        throw new Error("Missing the required parameter 'integrationId' when calling updateBugTrackerIntegration");
      }
      // verify the required parameter 'projectId' is set
      if (projectId === undefined || projectId === null) {
        throw new Error("Missing the required parameter 'projectId' when calling updateBugTrackerIntegration");
      }
      // verify the required parameter 'userId' is set
      if (userId === undefined || userId === null) {
        throw new Error("Missing the required parameter 'userId' when calling updateBugTrackerIntegration");
      }
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling updateBugTrackerIntegration");
      }

      let pathParams = {
        'integration_id': integrationId,
        'project_id': projectId,
        'user_id': userId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/api/v1/users/{user_id}/projects/{project_id}/integrations/{integration_id}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Update Bug Tracker Integration
     * @param {String} integrationId 
     * @param {String} projectId 
     * @param {String} userId 
     * @param {module:model/UpdateIntegrationRequestModel} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Object}
     */
    updateBugTrackerIntegration(integrationId, projectId, userId, body) {
      return this.updateBugTrackerIntegrationWithHttpInfo(integrationId, projectId, userId, body)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Update Bug Tracker Integration Config
     * @param {String} integrationId 
     * @param {String} projectId 
     * @param {String} userId 
     * @param {module:model/UpdateIntegrationConfigRequestModel} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Object} and HTTP response
     */
    updateBugTrackerIntegrationConfigWithHttpInfo(integrationId, projectId, userId, body) {
      let postBody = body;
      // verify the required parameter 'integrationId' is set
      if (integrationId === undefined || integrationId === null) {
        throw new Error("Missing the required parameter 'integrationId' when calling updateBugTrackerIntegrationConfig");
      }
      // verify the required parameter 'projectId' is set
      if (projectId === undefined || projectId === null) {
        throw new Error("Missing the required parameter 'projectId' when calling updateBugTrackerIntegrationConfig");
      }
      // verify the required parameter 'userId' is set
      if (userId === undefined || userId === null) {
        throw new Error("Missing the required parameter 'userId' when calling updateBugTrackerIntegrationConfig");
      }
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling updateBugTrackerIntegrationConfig");
      }

      let pathParams = {
        'integration_id': integrationId,
        'project_id': projectId,
        'user_id': userId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/api/v1/users/{user_id}/projects/{project_id}/integrations/{integration_id}/config', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Update Bug Tracker Integration Config
     * @param {String} integrationId 
     * @param {String} projectId 
     * @param {String} userId 
     * @param {module:model/UpdateIntegrationConfigRequestModel} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Object}
     */
    updateBugTrackerIntegrationConfig(integrationId, projectId, userId, body) {
      return this.updateBugTrackerIntegrationConfigWithHttpInfo(integrationId, projectId, userId, body)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


}
