/**
 * FastAPI
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import CreateLangRequestModel from '../model/CreateLangRequestModel';
import ErrorModel from '../model/ErrorModel';
import HTTPValidationError from '../model/HTTPValidationError';
import LangResponseModel from '../model/LangResponseModel';
import ListLangsResponseModel from '../model/ListLangsResponseModel';
import UpdateLangRequestModel from '../model/UpdateLangRequestModel';

/**
* LangsAdmin service.
* @module api/LangsAdminApi
* @version 0.1.0
*/
export default class LangsAdminApi {

    /**
    * Constructs a new LangsAdminApi. 
    * @alias module:api/LangsAdminApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }



    /**
     * Create Lang
     * @param {module:model/CreateLangRequestModel} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/LangResponseModel} and HTTP response
     */
    createLangWithHttpInfo(body) {
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling createLang");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = LangResponseModel;
      return this.apiClient.callApi(
        '/api/v1/admin/langs', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Create Lang
     * @param {module:model/CreateLangRequestModel} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/LangResponseModel}
     */
    createLang(body) {
      return this.createLangWithHttpInfo(body)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Delete Lang
     * @param {module:model/String} langId An enumeration.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Object} and HTTP response
     */
    deleteLangWithHttpInfo(langId) {
      let postBody = null;
      // verify the required parameter 'langId' is set
      if (langId === undefined || langId === null) {
        throw new Error("Missing the required parameter 'langId' when calling deleteLang");
      }

      let pathParams = {
        'lang_id': langId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/api/v1/admin/langs/{lang_id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Delete Lang
     * @param {module:model/String} langId An enumeration.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Object}
     */
    deleteLang(langId) {
      return this.deleteLangWithHttpInfo(langId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get Lang
     * @param {module:model/String} langId An enumeration.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/LangResponseModel} and HTTP response
     */
    getLangWithHttpInfo(langId) {
      let postBody = null;
      // verify the required parameter 'langId' is set
      if (langId === undefined || langId === null) {
        throw new Error("Missing the required parameter 'langId' when calling getLang");
      }

      let pathParams = {
        'lang_id': langId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = LangResponseModel;
      return this.apiClient.callApi(
        '/api/v1/admin/langs/{lang_id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Get Lang
     * @param {module:model/String} langId An enumeration.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/LangResponseModel}
     */
    getLang(langId) {
      return this.getLangWithHttpInfo(langId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * List Langs
     * @param {Object} opts Optional parameters
     * @param {Number} opts.pgSize  (default to 100)
     * @param {Number} opts.pgNum  (default to 0)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ListLangsResponseModel} and HTTP response
     */
    listLangsWithHttpInfo(opts) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'pg_size': opts['pgSize'],
        'pg_num': opts['pgNum']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ListLangsResponseModel;
      return this.apiClient.callApi(
        '/api/v1/admin/langs', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * List Langs
     * @param {Object} opts Optional parameters
     * @param {Number} opts.pgSize  (default to 100)
     * @param {Number} opts.pgNum  (default to 0)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ListLangsResponseModel}
     */
    listLangs(opts) {
      return this.listLangsWithHttpInfo(opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Update Lang
     * @param {module:model/String} langId An enumeration.
     * @param {module:model/UpdateLangRequestModel} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Object} and HTTP response
     */
    updateLangWithHttpInfo(langId, body) {
      let postBody = body;
      // verify the required parameter 'langId' is set
      if (langId === undefined || langId === null) {
        throw new Error("Missing the required parameter 'langId' when calling updateLang");
      }
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling updateLang");
      }

      let pathParams = {
        'lang_id': langId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/api/v1/admin/langs/{lang_id}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Update Lang
     * @param {module:model/String} langId An enumeration.
     * @param {module:model/UpdateLangRequestModel} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Object}
     */
    updateLang(langId, body) {
      return this.updateLangWithHttpInfo(langId, body)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


}
