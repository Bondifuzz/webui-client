/**
 * FastAPI
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import AdminUpdatePoolInfoRequestModel from '../model/AdminUpdatePoolInfoRequestModel';
import CreatePoolRequestModel from '../model/CreatePoolRequestModel';
import ErrorModel from '../model/ErrorModel';
import HTTPValidationError from '../model/HTTPValidationError';
import ItemCountResponseModel from '../model/ItemCountResponseModel';
import ListPoolsResponseModel from '../model/ListPoolsResponseModel';
import PoolResponseModel from '../model/PoolResponseModel';

/**
* PoolsAdmin service.
* @module api/PoolsAdminApi
* @version 0.1.0
*/
export default class PoolsAdminApi {

    /**
    * Constructs a new PoolsAdminApi. 
    * @alias module:api/PoolsAdminApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }



    /**
     * Admin Create Pool
     * @param {module:model/CreatePoolRequestModel} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/PoolResponseModel} and HTTP response
     */
    adminCreatePoolWithHttpInfo(body) {
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling adminCreatePool");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = PoolResponseModel;
      return this.apiClient.callApi(
        '/api/v1/admin/pools', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Admin Create Pool
     * @param {module:model/CreatePoolRequestModel} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/PoolResponseModel}
     */
    adminCreatePool(body) {
      return this.adminCreatePoolWithHttpInfo(body)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Admin Delete Pool
     * @param {String} poolId 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Object} and HTTP response
     */
    adminDeletePoolWithHttpInfo(poolId) {
      let postBody = null;
      // verify the required parameter 'poolId' is set
      if (poolId === undefined || poolId === null) {
        throw new Error("Missing the required parameter 'poolId' when calling adminDeletePool");
      }

      let pathParams = {
        'pool_id': poolId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/api/v1/admin/pools/{pool_id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Admin Delete Pool
     * @param {String} poolId 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Object}
     */
    adminDeletePool(poolId) {
      return this.adminDeletePoolWithHttpInfo(poolId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Admin Get Pool
     * @param {String} poolId 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/PoolResponseModel} and HTTP response
     */
    adminGetPoolWithHttpInfo(poolId) {
      let postBody = null;
      // verify the required parameter 'poolId' is set
      if (poolId === undefined || poolId === null) {
        throw new Error("Missing the required parameter 'poolId' when calling adminGetPool");
      }

      let pathParams = {
        'pool_id': poolId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = PoolResponseModel;
      return this.apiClient.callApi(
        '/api/v1/admin/pools/{pool_id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Admin Get Pool
     * @param {String} poolId 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/PoolResponseModel}
     */
    adminGetPool(poolId) {
      return this.adminGetPoolWithHttpInfo(poolId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Admin Get Pools Count
     * @param {Object} opts Optional parameters
     * @param {Number} opts.pgSize  (default to 100)
     * @param {String} opts.userId 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ItemCountResponseModel} and HTTP response
     */
    adminGetPoolsCountWithHttpInfo(opts) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'pg_size': opts['pgSize'],
        'user_id': opts['userId']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ItemCountResponseModel;
      return this.apiClient.callApi(
        '/api/v1/admin/pools/count', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Admin Get Pools Count
     * @param {Object} opts Optional parameters
     * @param {Number} opts.pgSize  (default to 100)
     * @param {String} opts.userId 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ItemCountResponseModel}
     */
    adminGetPoolsCount(opts) {
      return this.adminGetPoolsCountWithHttpInfo(opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Admin List Pools
     * @param {Object} opts Optional parameters
     * @param {Number} opts.pgSize  (default to 100)
     * @param {Number} opts.pgNum  (default to 0)
     * @param {String} opts.userId 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ListPoolsResponseModel} and HTTP response
     */
    adminListPoolsWithHttpInfo(opts) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'pg_size': opts['pgSize'],
        'pg_num': opts['pgNum'],
        'user_id': opts['userId']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ListPoolsResponseModel;
      return this.apiClient.callApi(
        '/api/v1/admin/pools', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Admin List Pools
     * @param {Object} opts Optional parameters
     * @param {Number} opts.pgSize  (default to 100)
     * @param {Number} opts.pgNum  (default to 0)
     * @param {String} opts.userId 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ListPoolsResponseModel}
     */
    adminListPools(opts) {
      return this.adminListPoolsWithHttpInfo(opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Admin Update Pool Info
     * @param {String} poolId 
     * @param {module:model/AdminUpdatePoolInfoRequestModel} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Object} and HTTP response
     */
    adminUpdatePoolInfoWithHttpInfo(poolId, body) {
      let postBody = body;
      // verify the required parameter 'poolId' is set
      if (poolId === undefined || poolId === null) {
        throw new Error("Missing the required parameter 'poolId' when calling adminUpdatePoolInfo");
      }
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling adminUpdatePoolInfo");
      }

      let pathParams = {
        'pool_id': poolId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/api/v1/admin/pools/{pool_id}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Admin Update Pool Info
     * @param {String} poolId 
     * @param {module:model/AdminUpdatePoolInfoRequestModel} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Object}
     */
    adminUpdatePoolInfo(poolId, body) {
      return this.adminUpdatePoolInfoWithHttpInfo(poolId, body)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Admin Update Pool Node Group
     * @param {String} poolId 
     * @param {Object.<String, Object>} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Object} and HTTP response
     */
    adminUpdatePoolNodeGroupWithHttpInfo(poolId, body) {
      let postBody = body;
      // verify the required parameter 'poolId' is set
      if (poolId === undefined || poolId === null) {
        throw new Error("Missing the required parameter 'poolId' when calling adminUpdatePoolNodeGroup");
      }
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling adminUpdatePoolNodeGroup");
      }

      let pathParams = {
        'pool_id': poolId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/api/v1/admin/pools/{pool_id}/node_group', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Admin Update Pool Node Group
     * @param {String} poolId 
     * @param {Object.<String, Object>} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Object}
     */
    adminUpdatePoolNodeGroup(poolId, body) {
      return this.adminUpdatePoolNodeGroupWithHttpInfo(poolId, body)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


}
