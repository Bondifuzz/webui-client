/**
 * FastAPI
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import ErrorModel from '../model/ErrorModel';
import HTTPValidationError from '../model/HTTPValidationError';
import ImageResponseModel from '../model/ImageResponseModel';
import ItemCountResponseModel from '../model/ItemCountResponseModel';
import ListImagesResponseModel from '../model/ListImagesResponseModel';
import ORMEngineID from '../model/ORMEngineID';

/**
* ProjectImages service.
* @module api/ProjectImagesApi
* @version 0.1.0
*/
export default class ProjectImagesApi {

    /**
    * Constructs a new ProjectImagesApi. 
    * @alias module:api/ProjectImagesApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }



    /**
     * Count Project Images
     * Returns count of docker images corresponding to provided programming fuzzer engine in project
     * @param {String} projectId 
     * @param {String} userId 
     * @param {Object} opts Optional parameters
     * @param {Number} opts.pgSize  (default to 100)
     * @param {Array.<module:model/ORMEngineID>} opts.engines 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ItemCountResponseModel} and HTTP response
     */
    countProjectImagesWithHttpInfo(projectId, userId, opts) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'projectId' is set
      if (projectId === undefined || projectId === null) {
        throw new Error("Missing the required parameter 'projectId' when calling countProjectImages");
      }
      // verify the required parameter 'userId' is set
      if (userId === undefined || userId === null) {
        throw new Error("Missing the required parameter 'userId' when calling countProjectImages");
      }

      let pathParams = {
        'project_id': projectId,
        'user_id': userId
      };
      let queryParams = {
        'pg_size': opts['pgSize'],
        'engines': this.apiClient.buildCollectionParam(opts['engines'], 'multi')
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ItemCountResponseModel;
      return this.apiClient.callApi(
        '/api/v1/users/{user_id}/projects/{project_id}/images/count', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Count Project Images
     * Returns count of docker images corresponding to provided programming fuzzer engine in project
     * @param {String} projectId 
     * @param {String} userId 
     * @param {Object} opts Optional parameters
     * @param {Number} opts.pgSize  (default to 100)
     * @param {Array.<module:model/ORMEngineID>} opts.engines 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ItemCountResponseModel}
     */
    countProjectImages(projectId, userId, opts) {
      return this.countProjectImagesWithHttpInfo(projectId, userId, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get Project Image
     * Returns project image
     * @param {String} projectId 
     * @param {String} imageId 
     * @param {String} userId 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ImageResponseModel} and HTTP response
     */
    getProjectImageWithHttpInfo(projectId, imageId, userId) {
      let postBody = null;
      // verify the required parameter 'projectId' is set
      if (projectId === undefined || projectId === null) {
        throw new Error("Missing the required parameter 'projectId' when calling getProjectImage");
      }
      // verify the required parameter 'imageId' is set
      if (imageId === undefined || imageId === null) {
        throw new Error("Missing the required parameter 'imageId' when calling getProjectImage");
      }
      // verify the required parameter 'userId' is set
      if (userId === undefined || userId === null) {
        throw new Error("Missing the required parameter 'userId' when calling getProjectImage");
      }

      let pathParams = {
        'project_id': projectId,
        'image_id': imageId,
        'user_id': userId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ImageResponseModel;
      return this.apiClient.callApi(
        '/api/v1/users/{user_id}/projects/{project_id}/images/{image_id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Get Project Image
     * Returns project image
     * @param {String} projectId 
     * @param {String} imageId 
     * @param {String} userId 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ImageResponseModel}
     */
    getProjectImage(projectId, imageId, userId) {
      return this.getProjectImageWithHttpInfo(projectId, imageId, userId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * List Project Images
     * Returns list of docker images corresponding to provided fuzzer type in project
     * @param {String} projectId 
     * @param {String} userId 
     * @param {Object} opts Optional parameters
     * @param {Number} opts.pgSize  (default to 100)
     * @param {Number} opts.pgNum  (default to 0)
     * @param {Array.<module:model/ORMEngineID>} opts.engines 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ListImagesResponseModel} and HTTP response
     */
    listProjectImagesWithHttpInfo(projectId, userId, opts) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'projectId' is set
      if (projectId === undefined || projectId === null) {
        throw new Error("Missing the required parameter 'projectId' when calling listProjectImages");
      }
      // verify the required parameter 'userId' is set
      if (userId === undefined || userId === null) {
        throw new Error("Missing the required parameter 'userId' when calling listProjectImages");
      }

      let pathParams = {
        'project_id': projectId,
        'user_id': userId
      };
      let queryParams = {
        'pg_size': opts['pgSize'],
        'pg_num': opts['pgNum'],
        'engines': this.apiClient.buildCollectionParam(opts['engines'], 'multi')
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ListImagesResponseModel;
      return this.apiClient.callApi(
        '/api/v1/users/{user_id}/projects/{project_id}/images', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * List Project Images
     * Returns list of docker images corresponding to provided fuzzer type in project
     * @param {String} projectId 
     * @param {String} userId 
     * @param {Object} opts Optional parameters
     * @param {Number} opts.pgSize  (default to 100)
     * @param {Number} opts.pgNum  (default to 0)
     * @param {Array.<module:model/ORMEngineID>} opts.engines 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ListImagesResponseModel}
     */
    listProjectImages(projectId, userId, opts) {
      return this.listProjectImagesWithHttpInfo(projectId, userId, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


}
